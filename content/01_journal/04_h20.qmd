---
title: "Challenge - Automated Machine Learning with H20 (II)"
author: "Milan Bhardwaj"
date: "06/04/2023"
---

# 1. Load the training & test dataset

## Loading Libs:
```{r}
library(tidyverse)
library(parsnip)
library(recipes)
library(rsample)
library(yardstick)
library(workflows)
library(tune)
```

## Loading the Testing and Training Dataset:
```{r}
product_dataset <- read_csv("../../files/product_backorders.csv")
product_dataset_secondary <- product_dataset %>% 
  mutate(
      product_backorder = went_on_backorder %>% str_to_lower() %>% str_detect("yes") %>% as.numeric()
  ) %>% 
  select(-c(went_on_backorder))
glimpse(product_dataset)

# Splitting the dataset into train and test
split_object<- initial_split(product_dataset_secondary, prop = 0.75)
train_table_final <- training(split_object)
test_table_final <- testing(split_object)
```

# 2. Specifiying response and predictor:
```{r}
my_recipe_object <- recipe(product_backorder ~., data = train_table_final) %>% 
    step_zv(all_predictors()) %>% 
    step_dummy(all_nominal(),-all_outcomes()) %>%
    prep()
```

```{r}
summary(my_recipe_object)
```

```{r}
glimpse(bake(my_recipe_object,new_data = NULL))
```
## Starting H2O:
```{r}
library(h2o)
h2o.init()
```

# 3. Running AutoML specifying the stopping criterion:
```{r}
library(h2o)
h2o.init()
split <- h2o.splitFrame(as.h2o(train_table_final), ratios = c(0.75), seed = 42)
train_h2o_set <- split[[1]]
valid_h2o_set <- split[[2]]
test_h2o_set  <- as.h2o(test_table_final)
response <- "product_backorder"
predictors <- setdiff(names(train_h2o_set), response)
```
```{r}
automl_h2o_modelling <- h2o.automl(
  x = predictors,
  y = response,
  training_frame    = train_h2o_set,
  validation_frame  = valid_h2o_set,
  leaderboard_frame = test_h2o_set,
  max_runtime_secs  = 60,
  nfolds            = 5,
  stopping_metric = "mae", stopping_rounds = 3,
                        stopping_tolerance = 1e-2
)
```

# 4. View the Leaderboard:
```{r}
automl_h2o_modelling@leaderboard 
automl_h2o_modelling@leader
?h2o.deeplearning
```

```{r}
extract_h2o_model <- function(h2o_leaderboard, n = 1, verbose = T) {
    h2o_model_name <- h2o_leaderboard %>%
        as.tibble() %>%
        slice_(n) %>%
        pull(model_id)
    
    if (verbose) message(h2o_model_name)
    return(h2o_model_name)
}
```


# 5. Leader Model Prediction:
```{r}
h2o.init()
optimum_model <- automl_h2o_modelling@leaderboard %>% 
  extract_h2o_model(1) %>% 
  h2o.getModel()
```

```{r}
h2o.init()
h20_predictions <- h2o.predict(optimum_model, newdata = as.h2o(test_table_final))
typeof(h20_predictions)
h20_predictions_tbl <- h20_predictions %>% as_tibble()
```
```{r}
glimpse(h20_predictions_tbl)
```

# 6.Leader model save to local memory:
```{r}
optimum_model %>% h2o.saveModel(path = "Challenge_H20_Leader_Model_20230604")
```
Footer