{
  "hash": "ef8e92d0354ba70d8885bd632f8e5db8",
  "result": {
    "markdown": "---\ntitle: \"Challenge - Performance Measures\"\nauthor: \"Milan Bhardwaj\"\ndate: \"06/09/2023\"\n---\n\n\n\n\n## Load the training & test dataset\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-1_a1e51c2bd6eff9bfca870b27d9bc51e9'}\n\n```{.r .cell-code}\nlibrary(recipes)\nlibrary(rsample)\nlibrary(tune)\n```\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-2_be852826f6dcef4dbc95cb26cc34a1e2'}\n\n```{.r .cell-code}\nlibrary(yardstick)\nlibrary(workflows)\nlibrary(tidyverse)\nlibrary(parsnip)\n```\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-3_d5dc35aa2ca43327e4a9384ac6e3e5b0'}\n\n```{.r .cell-code}\nmaster_data <- read_csv(\"../../files/product_backorders.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nmaster_data_mutated <- master_data %>% \n  mutate(\n      product_backorder = went_on_backorder %>% str_to_lower() %>% str_detect(\"yes\") %>% as.numeric()\n  ) %>% \n  mutate(product_backorder = as.factor(product_backorder)) %>%\n  select(-c(went_on_backorder))\nglimpse(master_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n```\n:::\n\n```{.r .cell-code}\nproduct_split_obj<- initial_split(master_data_mutated, prop = 0.75)\nproduct_train_tbl<- training(product_split_obj)\nproduct_test_tbl<- testing(product_split_obj)\n```\n:::\n\n## Specifiy the response and predictor variables\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-4_4e8d851ef33207182a86c4b3950f21dc'}\n\n```{.r .cell-code}\nproduct_recipe_obj <- recipe(product_backorder ~., data = product_train_tbl) %>% \n    step_zv(all_predictors()) %>% \n    step_dummy(all_nominal(),-all_outcomes()) %>%\n    prep()\n```\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-5_6536e46c5c1959017e472c26bfef0a9e'}\n\n```{.r .cell-code}\nsummary(product_recipe_obj)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"variable\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"type\"],\"name\":[2],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"role\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"source\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"sku\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"national_inv\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"lead_time\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"in_transit_qty\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"forecast_3_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"forecast_6_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"forecast_9_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sales_1_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sales_3_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sales_6_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"sales_9_month\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"min_bank\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"pieces_past_due\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"perf_6_month_avg\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"perf_12_month_avg\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"local_bo_qty\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"original\"},{\"1\":\"product_backorder\",\"2\":\"<chr [3]>\",\"3\":\"outcome\",\"4\":\"original\"},{\"1\":\"potential_issue_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"},{\"1\":\"deck_risk_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"},{\"1\":\"oe_constraint_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"},{\"1\":\"ppap_risk_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"},{\"1\":\"stop_auto_buy_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"},{\"1\":\"rev_stop_Yes\",\"2\":\"<chr [2]>\",\"3\":\"predictor\",\"4\":\"derived\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n## run AutoML specifying the stopping criterion\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-6_015f35f9efdfafad1bffd96caa0721a6'}\n\n```{.r .cell-code}\nlibrary(h2o)\nh2o.init()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         47 minutes 23 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    4 months and 1 day \n#>     H2O cluster name:           H2O_started_from_R_milan_cox186 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.52 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (4 months and 1 day) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-7_81c6d87dbf889bb0e2102f7cfef6a4b9'}\n\n```{.r .cell-code}\nsplit_h2o_df <- h2o.splitFrame(as.h2o(product_train_tbl), ratios = c(0.75), seed = 42)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ntrain_h2o_df <- split_h2o_df[[1]]\nvalid_h2o_df <- split_h2o_df[[2]]\ntest_h2o_df  <- as.h2o(product_test_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\ny <- \"product_backorder\"\nx <- setdiff(names(train_h2o_df), y)\n```\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-8_198b6bdb096a279c382df82c9b45152b'}\n\n```{.r .cell-code}\nautoml_product_models_h2o <- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o_df,\n  validation_frame  = valid_h2o_df,\n  leaderboard_frame = test_h2o_df,\n  nfolds            = 5,\n  max_runtime_secs  = 60,\n  stopping_metric = \"auc\",\n  stopping_rounds = 3,\n  stopping_tolerance = 1e-2\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   2%\n#> 19:32:43.765: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 19:32:43.779: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |====                                                                  |   5%\n#> 19:32:46.953: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |======                                                                |   9%\n#> 19:32:48.659: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |========                                                              |  12%\n#> 19:32:51.318: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |===========                                                           |  15%\n#> 19:32:53.35: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |=============                                                         |  19%\n#> 19:32:55.682: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |==================                                                    |  26%\n#> 19:32:59.429: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |====================                                                  |  29%\n#> 19:33:02.161: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=========================                                             |  36%\n#> 19:33:05.58: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |===========================                                           |  39%\n#> 19:33:08.235: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |================================                                      |  46%\n#> 19:33:10.502: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |===================================                                   |  49%\n#> 19:33:13.518: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |=====================================                                 |  53%\n#> 19:33:15.866: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  63%\n#> 19:33:21.416: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |===============================================                       |  66%\n  |                                                                            \n  |=================================================                     |  70%\n#> 19:33:24.705: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |===================================================                   |  73%\n#> 19:33:28.296: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |========================================================              |  80%\n#> 19:33:30.957: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n  |                                                                            \n  |==========================================================            |  84%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n# Leaderboard visualization\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-9_3abe749ebfdf2897ffb1dd909029a84f'}\n\n```{.r .cell-code}\nautoml_product_models_h2o@leaderboard \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>                                                  model_id       auc   logloss\n#> 1 StackedEnsemble_BestOfFamily_3_AutoML_7_20230609_193243 0.9502534 0.1729262\n#> 2    StackedEnsemble_AllModels_1_AutoML_7_20230609_193243 0.9490388 0.1742314\n#> 3    StackedEnsemble_AllModels_2_AutoML_7_20230609_193243 0.9490095 0.1739036\n#> 4 StackedEnsemble_BestOfFamily_2_AutoML_7_20230609_193243 0.9484934 0.1754000\n#> 5 StackedEnsemble_BestOfFamily_1_AutoML_7_20230609_193243 0.9474496 0.1765102\n#> 6                      XGBoost_1_AutoML_7_20230609_193243 0.9456540 0.1799462\n#>       aucpr mean_per_class_error      rmse        mse\n#> 1 0.7368035            0.1563025 0.2256334 0.05091043\n#> 2 0.7374437            0.1573752 0.2265942 0.05134493\n#> 3 0.7385541            0.1549026 0.2265464 0.05132329\n#> 4 0.7316700            0.1635404 0.2270464 0.05155005\n#> 5 0.7316064            0.1546361 0.2286682 0.05228916\n#> 6 0.7265601            0.1808463 0.2300126 0.05290580\n#> \n#> [20 rows x 7 columns]\n```\n:::\n\n```{.r .cell-code}\nsummary(automl_product_models_h2o@leaderboard %>% \n              as_tibble() )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>    model_id              auc            logloss           aucpr       \n#>  Length:20          Min.   :0.6781   Min.   :0.1729   Min.   :0.2383  \n#>  Class :character   1st Qu.:0.9262   1st Qu.:0.1779   1st Qu.:0.6765  \n#>  Mode  :character   Median :0.9411   Median :0.1930   Median :0.7133  \n#>                     Mean   :0.9088   Mean   :0.2130   Mean   :0.6497  \n#>                     3rd Qu.:0.9461   3rd Qu.:0.2161   3rd Qu.:0.7316  \n#>                     Max.   :0.9503   Max.   :0.3540   Max.   :0.7386  \n#>  mean_per_class_error      rmse             mse         \n#>  Min.   :0.1425       Min.   :0.2256   Min.   :0.05091  \n#>  1st Qu.:0.1560       1st Qu.:0.2290   1st Qu.:0.05244  \n#>  Median :0.1640       Median :0.2372   Median :0.05626  \n#>  Mean   :0.1894       Mean   :0.2479   Mean   :0.06229  \n#>  3rd Qu.:0.1842       3rd Qu.:0.2507   3rd Qu.:0.06286  \n#>  Max.   :0.3636       Max.   :0.3199   Max.   :0.10232\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-10_341218c91456e819a5560e31fdd4c3fc'}\n\n```{.r .cell-code}\ndata_transformed_tbl_h20 <- automl_product_models_h2o@leaderboard %>%\n        as_tibble() %>%\n        select(-c(rmse, mse)) %>% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %>%\n        slice(1:15) %>% \n        rownames_to_column(var = \"rowname\") %>%\n        mutate(\n          model_id   = as_factor(model_id) %>% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %>% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %>% \n        mutate(model_id = paste0(rowname, \". \", model_id) %>% as_factor() %>% fct_rev())\n```\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-11_c5968c1d2c73cac4cbbe801230f9504b'}\n\n```{.r .cell-code}\ndata_transformed_tbl_h20 %>%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Metrics\",\n             subtitle = paste0(\"Order by: \", \"auc\"),\n             y = \"Postion, ID of model\", x = \"\") + \n        theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n# Tune a model with grid search\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-12_5e8cd8f0f5bcb97872b73b751a35b876'}\n\n```{.r .cell-code}\ndl_grid_01 <- h2o.grid(\n\n    algorithm = \"deeplearning\",\n    grid_id = \"dl_grid_01\",\n\n    x = x,\n    y = y,\n    \n    training_frame   = train_h2o_df,\n    validation_frame = valid_h2o_df,\n    nfolds = 5,\n\n        hyper_params = list(\n        hidden = list(c(10, 10, 10), c(20, 15, 10), c(20, 20, 20)),\n        epochs = c(10, 15, 20)\n    )\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-13_198a7a369931e9aa92998d7335eadd04'}\n\n```{.r .cell-code}\nh2o.getGrid(grid_id = \"dl_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2O Grid Details\n#> ================\n#> \n#> Grid ID: dl_grid_01 \n#> Used hyper parameters: \n#>   -  epochs \n#>   -  hidden \n#> Number of models: 27 \n#> Number of failed models: 0 \n#> \n#> Hyper-Parameter Search Summary: ordered by decreasing auc\n#>     epochs       hidden           model_ids     auc\n#> 1 20.82163 [20, 20, 20] dl_grid_01_model_18 0.85872\n#> 2 20.80478 [20, 15, 10] dl_grid_01_model_15 0.83242\n#> 3 20.78904 [10, 10, 10] dl_grid_01_model_12 0.83062\n#> 4 15.59942 [20, 15, 10] dl_grid_01_model_14 0.82588\n#> 5 20.79693 [20, 20, 20]  dl_grid_01_model_9 0.82418\n#> \n#> ---\n#>      epochs       hidden           model_ids     auc\n#> 22 10.39599 [10, 10, 10] dl_grid_01_model_19 0.77179\n#> 23 10.41676 [20, 15, 10] dl_grid_01_model_22 0.76882\n#> 24 15.61113 [20, 20, 20] dl_grid_01_model_26 0.76837\n#> 25 10.41907 [20, 20, 20] dl_grid_01_model_25 0.76789\n#> 26 15.59751 [20, 20, 20]  dl_grid_01_model_8 0.76669\n#> 27 10.40581 [20, 20, 20]  dl_grid_01_model_7 0.75099\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-14_0c6e25f66cc6e4e879f9cf394d44853e'}\n\n```{.r .cell-code}\ndl_grid_01_model <- h2o.getModel(\"deeplearning_grid_01_model_8\")\n\ndl_grid_01_model %>% h2o.auc(train = T, valid = T, xval = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#>     train     valid      xval \n#> 0.8397126 0.8260033 0.8127019\n```\n:::\n\n```{.r .cell-code}\nh2o_perf <-dl_grid_01_model %>%\n    h2o.performance(newdata = as.h2o(product_test_tbl))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nh2o_perf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> H2OBinomialMetrics: deeplearning\n#> \n#> MSE:  0.08698951\n#> RMSE:  0.2949398\n#> LogLoss:  0.2957731\n#> Mean Per-Class Error:  0.2773808\n#> AUC:  0.8265579\n#> AUCPR:  0.4688939\n#> Gini:  0.6531158\n#> \n#> Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#>           0   1    Error       Rate\n#> 0      3851 344 0.082002  =344/4195\n#> 1       269 300 0.472759   =269/569\n#> Totals 4120 644 0.128673  =613/4764\n#> \n#> Maximum Metrics: Maximum metrics at their respective thresholds\n#>                         metric threshold       value idx\n#> 1                       max f1  0.152787    0.494641 194\n#> 2                       max f2  0.068745    0.562215 290\n#> 3                 max f0point5  0.193801    0.541114 160\n#> 4                 max accuracy  0.215837    0.897145 147\n#> 5                max precision  0.988241    1.000000   0\n#> 6                   max recall  0.000563    1.000000 398\n#> 7              max specificity  0.988241    1.000000   0\n#> 8             max absolute_mcc  0.173714    0.427002 175\n#> 9   max min_per_class_accuracy  0.089212    0.728248 266\n#> 10 max mean_per_class_accuracy  0.070273    0.742223 288\n#> 11                     max tns  0.988241 4195.000000   0\n#> 12                     max fns  0.988241  567.000000   0\n#> 13                     max fps  0.000072 4195.000000 399\n#> 14                     max tps  0.000563  569.000000 398\n#> 15                     max tnr  0.988241    1.000000   0\n#> 16                     max fnr  0.988241    0.996485   0\n#> 17                     max fpr  0.000072    1.000000 399\n#> 18                     max tpr  0.000563    1.000000 398\n#> \n#> Gains/Lift Table: Extract with `h2o.gainsLift(<model>, <data>)` or `h2o.gainsLift(<model>, valid=<T/F>, xval=<T/F>)`\n```\n:::\n:::\n\n\n# Visualize the trade of between the precision and the recall and the optimal threshold\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-15_2276cecd3c35a5ab1f3929a392261fe3'}\n\n```{.r .cell-code}\nh2o.confusionMatrix(h2o_perf)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"0\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Error\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"Rate\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"3851\",\"2\":\"344\",\"3\":\"0.08200238\",\"4\":\"=344/4195\",\"_rn_\":\"0\"},{\"1\":\"269\",\"2\":\"300\",\"3\":\"0.47275923\",\"4\":\"=269/569\",\"_rn_\":\"1\"},{\"1\":\"4120\",\"2\":\"644\",\"3\":\"0.12867338\",\"4\":\"=613/4764\",\"_rn_\":\"Totals\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\nperformance_tbl <- h2o_perf %>%\n    h2o.metric() %>%\n    as.tibble()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-16_38fd2a29f9df8a2b7347c5ecacd6e576'}\n\n```{.r .cell-code}\ntheme_new <- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),,\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"blue\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"pink\", size = 0.333)\n      ) \n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#> ℹ Please use the `linewidth` argument instead.\n```\n:::\n\n```{.r .cell-code}\nperformance_tbl %>%\n    filter(f1 == max(f1))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"threshold\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f1\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f2\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"f0point5\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"accuracy\"],\"name\":[5],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"precision\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"recall\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"specificity\"],\"name\":[8],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"absolute_mcc\"],\"name\":[9],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"min_per_class_accuracy\"],\"name\":[10],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"mean_per_class_accuracy\"],\"name\":[11],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tns\"],\"name\":[12],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fns\"],\"name\":[13],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fps\"],\"name\":[14],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tps\"],\"name\":[15],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tnr\"],\"name\":[16],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fnr\"],\"name\":[17],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"fpr\"],\"name\":[18],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"tpr\"],\"name\":[19],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"idx\"],\"name\":[20],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"0.152787\",\"2\":\"0.4946414\",\"3\":\"0.5136986\",\"4\":\"0.4769475\",\"5\":\"0.8713266\",\"6\":\"0.4658385\",\"7\":\"0.5272408\",\"8\":\"0.9179976\",\"9\":\"0.422302\",\"10\":\"0.5272408\",\"11\":\"0.7226192\",\"12\":\"3851\",\"13\":\"269\",\"14\":\"344\",\"15\":\"300\",\"16\":\"0.9179976\",\"17\":\"0.4727592\",\"18\":\"0.08200238\",\"19\":\"0.5272408\",\"20\":\"194\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-17_b5b772218e279e08115559f3c72714e9'}\n\n```{.r .cell-code}\nperformance_tbl %>%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"black\", size = 1) +\n    geom_line(aes(y = recall), color = \"violet\", size = 1) +\n    \n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(h2o_perf, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n#> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#> ℹ Please use `linewidth` instead.\n```\n:::\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-18_7c8fa1aea7af2ef3cf941637ccb2079e'}\n\n```{.r .cell-code}\nbest_model <- h2o.getModel(\"deeplearning_grid_01_model_8\")\nbest_model %>% h2o.saveModel(path = \"05_my_performance_measure_model\",force = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> [1] \"/Users/milan/Documents/study/SEM2/BDS/grading/ss23-bdml-milan-15697/content/01_journal/05_my_performance_measure_model/deeplearning_grid_01_model_8\"\n```\n:::\n:::\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-19_5f937bd9de8792fa7d93184b03b87eda'}\n\n```{.r .cell-code}\nload_model_performance_metrics <- function(path, product_test_tbl) {\n    \n    model_h2o <- h2o.loadModel(path)\n    perf_h2o  <- h2o.performance(model_h2o, newdata = as.h2o(product_test_tbl)) \n    \n    perf_h2o %>%\n        h2o.metric() %>%\n        as_tibble() %>%\n        mutate(auc = h2o.auc(perf_h2o)) %>%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n```\n:::\n\n\n# PLOT\n## ROC Plot\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-20_9ec93e43eb8976875cbdcc71198b21c8'}\n\n```{.r .cell-code}\nmodel_metrics_tbl <- fs::dir_info(path = \"05_my_performance_measure_model\") %>%\n    select(path) %>%\n    mutate(metrics = map(path, load_model_performance_metrics, product_test_tbl)) %>%\n    unnest(cols = metrics)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\nglimpse(model_metrics_tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#> Rows: 400\n#> Columns: 6\n#> $ path      <fs::path> \"05_my_performance_measure_model/deeplearning_grid_01_m…\n#> $ tpr       <dbl> 0.003514938, 0.003514938, 0.005272408, 0.008787346, 0.010544…\n#> $ fpr       <dbl> 0.0000000000, 0.0002383790, 0.0002383790, 0.0002383790, 0.00…\n#> $ auc       <dbl> 0.8265579, 0.8265579, 0.8265579, 0.8265579, 0.8265579, 0.826…\n#> $ precision <dbl> 1.0000000, 0.6666667, 0.7500000, 0.8333333, 0.8571429, 0.875…\n#> $ recall    <dbl> 0.003514938, 0.003514938, 0.005272408, 0.008787346, 0.010544…\n```\n:::\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n        ) %>%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n\n    # just for demonstration purposes\n    geom_abline(color = \"violet\", linetype = \"dotted\") +\n\n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n```\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## Precision vs Recall Plot\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-21_c6152ab93ddae24cc8028c2595d208ea'}\n\n```{.r .cell-code}\nmodel_metrics_tbl %>%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,2] %>% as_factor(),\n        auc  = auc %>% round(3) %>% as.character() %>% as_factor()\n    ) %>%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Best 3 Top Performing Models' Performance\"\n    )\n```\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Gain Plot\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-22_61a40d0f7e87b558f1db1c0bdaaf145b'}\n\n```{.r .cell-code}\ngain_lift_tbl <- h2o_perf %>%\n    h2o.gainsLift() %>%\n    as.tibble()\n\ngain_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"lift\")) %>%\n    mutate(baseline = cumulative_data_fraction) %>%\n    rename(gain     = cumulative_capture_rate) %>%\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## Lift Plot\n\n::: {.cell hash='05_performance_measure_cache/html/unnamed-chunk-23_7f05d86b8bb3ec6b196db5e44f543f5b'}\n\n```{.r .cell-code}\nlift_transformed_tbl <- gain_lift_tbl %>% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %>%\n    select(-contains(\"capture\")) %>%\n    mutate(baseline = 1) %>%\n    rename(lift = cumulative_lift) %>%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %>%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n```\n\n::: {.cell-output-display}\n![](05_performance_measure_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}