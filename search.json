[
  {
    "objectID": "Automated Machine Learning with H20.html",
    "href": "Automated Machine Learning with H20.html",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "Automated Machine Learning with H20.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl %>% select(symbol, date, adjusted)\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%filter(date >= \"2018-01-01\")\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%group_by(symbol) %>%mutate(lag_adjusted = lag(adjusted, 1)) %>%filter(!is.na(lag_adjusted))\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%mutate(diff = adjusted - lag_adjusted,pct_return = diff / lag_adjusted)\n# Output: sp_500_daily_returns_tbl\n\n\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>% select(symbol, date, pct_return)\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n# Groups:   symbol [502]\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows"
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-2---convert-to-user-item-format",
    "href": "Automated Machine Learning with H20.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"../files/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n#not needed since I did it correctly above\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format; \n#here, I believe spread function from the tidyr package can be used to spread the date column and create a separate column for each date's percentage return value\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%spread(date, pct_return, fill = 0)\n# Output: \nstock_date_matrix_tbl\n\n# A tibble: 502 × 283\n   symbol `2018-01-03` `2018-01-04` `2018-01-05` `2018-01-08` `2018-01-09`\n   <chr>         <dbl>        <dbl>        <dbl>        <dbl>        <dbl>\n 1 A          0.0254       -0.00750     0.0160        0.00215     0.0246  \n 2 AAL       -0.0123        0.00630    -0.000380     -0.00988    -0.000959\n 3 AAP        0.00905       0.0369      0.0106       -0.00704    -0.00808 \n 4 AAPL      -0.000174      0.00465     0.0114       -0.00371    -0.000115\n 5 ABBV       0.0156       -0.00570     0.0174       -0.0160      0.00754 \n 6 ABC        0.00372      -0.00222     0.0121        0.0166      0.00640 \n 7 ABMD       0.0173        0.0175      0.0154        0.0271      0.00943 \n 8 ABT        0.00221      -0.00170     0.00289      -0.00288     0.00170 \n 9 ACN        0.00462       0.0118      0.00825       0.00799     0.00333 \n10 ADBE       0.0188        0.0120      0.0116       -0.00162     0.00897 \n# ℹ 492 more rows\n# ℹ 277 more variables: `2018-01-10` <dbl>, `2018-01-11` <dbl>,\n#   `2018-01-12` <dbl>, `2018-01-16` <dbl>, `2018-01-17` <dbl>,\n#   `2018-01-18` <dbl>, `2018-01-19` <dbl>, `2018-01-22` <dbl>,\n#   `2018-01-23` <dbl>, `2018-01-24` <dbl>, `2018-01-25` <dbl>,\n#   `2018-01-26` <dbl>, `2018-01-29` <dbl>, `2018-01-30` <dbl>,\n#   `2018-01-31` <dbl>, `2018-02-01` <dbl>, `2018-02-02` <dbl>, …"
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-3---perform-k-means-clustering",
    "href": "Automated Machine Learning with H20.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\n#stock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nstock_date_matrix_num_tbl <- stock_date_matrix_tbl %>% select(-symbol)\nkmeans_obj <- kmeans(stock_date_matrix_num_tbl, centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss. #total within-cluster sum of squares (tot.withinss)\n\n# Apply glance() to get the tot.withinss\nglance(kmeans_obj)$tot.withinss\n\n[1] 29.20555"
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-4---find-the-optimal-value-of-k",
    "href": "Automated Machine Learning with H20.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\ncenter <- 3\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>% select(-symbol) %>% kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\ncenters_tbl <- tibble(centers = 1:30)\nk_means_mapped_tbl <- centers_tbl %>% mutate(k_means = map(center, kmeans_mapper)) %>% mutate(glance = map(k_means, glance))\nk_means_mapped_tbl\n\n# A tibble: 30 × 3\n   centers k_means  glance          \n     <int> <list>   <list>          \n 1       1 <kmeans> <tibble [1 × 4]>\n 2       2 <kmeans> <tibble [1 × 4]>\n 3       3 <kmeans> <tibble [1 × 4]>\n 4       4 <kmeans> <tibble [1 × 4]>\n 5       5 <kmeans> <tibble [1 × 4]>\n 6       6 <kmeans> <tibble [1 × 4]>\n 7       7 <kmeans> <tibble [1 × 4]>\n 8       8 <kmeans> <tibble [1 × 4]>\n 9       9 <kmeans> <tibble [1 × 4]>\n10      10 <kmeans> <tibble [1 × 4]>\n# ℹ 20 more rows\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% unnest(glance) %>% ggplot(aes(x = centers, y = tot.withinss)) + geom_point() + geom_line() + labs(title = \"Scree Plot\") + theme_bw()\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-5---apply-umap",
    "href": "Automated Machine Learning with H20.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../files/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <- stock_date_matrix_tbl %>% select(-symbol) %>% umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\numap_results_tbl <- umap_results$layout %>% as_tibble() %>% bind_cols(stock_date_matrix_tbl %>% select(symbol))\numap_results_tbl\n\n# A tibble: 502 × 3\n       V1      V2 symbol\n    <dbl>   <dbl> <chr> \n 1 -2.18   0.180  A     \n 2 -0.300  2.40   AAL   \n 3  0.161 -1.03   AAP   \n 4 -2.69  -1.25   AAPL  \n 5  0.181  0.349  ABBV  \n 6  0.887  0.0870 ABC   \n 7 -2.83  -1.45   ABMD  \n 8 -1.71   0.0139 ABT   \n 9 -1.80  -0.375  ACN   \n10 -2.88  -1.62   ADBE  \n# ℹ 492 more rows\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>% ggplot(aes(x = V1, y = V2)) + geom_point(alpha = 0.5) + theme_tq() + ggtitle(\"UMAP Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "Automated Machine Learning with H20.html#step-6---combine-k-means-and-umap",
    "href": "Automated Machine Learning with H20.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Automated Machine Learning with H20",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../files/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"../files/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl$k_means[[10]]\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>% \n  select(symbol, .cluster) %>% \n  left_join(umap_results_tbl, by = \"symbol\") %>% \n  left_join(sp_500_index_tbl %>% select(symbol, company, sector), by = \"symbol\")\numap_kmeans_results_tbl\n\n# A tibble: 502 × 6\n   symbol .cluster      V1      V2 company                       sector         \n   <chr>  <fct>      <dbl>   <dbl> <chr>                         <chr>          \n 1 A      7        -0.764   1.65   Agilent Technologies Inc.     Health Care    \n 2 AAL    2        -2.70    0.455  American Airlines Group Inc.  Industrials    \n 3 AAP    10        0.739  -0.0320 Advance Auto Parts Inc.       Consumer Discr…\n 4 AAPL   9         0.0130  3.09   Apple Inc.                    Information Te…\n 5 ABBV   7        -0.965  -0.0193 AbbVie Inc.                   Health Care    \n 6 ABC    5        -0.506  -0.659  AmerisourceBergen Corporation Health Care    \n 7 ABMD   9         0.436   3.10   ABIOMED Inc.                  Health Care    \n 8 ABT    7        -0.262   1.35   Abbott Laboratories           Health Care    \n 9 ACN    7         0.0598  1.63   Accenture Plc Class A         Information Te…\n10 ADBE   9         0.570   3.43   Adobe Inc.                    Information Te…\n# ℹ 492 more rows\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\nggplot(umap_kmeans_results_tbl, aes(x = V1, y = V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3)) +\n  labs(title = \"Plotting K-Means and UMAP results\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html",
    "href": "content/01_journal/01_Company_Segmentation.html",
    "title": "Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/01_Company_Segmentation.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Challenge - Company Segmentation",
    "section": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl_main_dataset %>% glimpse()\n\n#> Rows: 1,225,765\n#> Columns: 8\n#> $ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#> $ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#> $ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#> $ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#> $ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#> $ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#> $ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#> $ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl <- sp_500_prices_tbl_main_dataset %>% select(symbol, date, adjusted)\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%filter(date >= \"2018-01-01\")\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%group_by(symbol) %>%mutate(lag_adjusted = lag(adjusted, 1)) %>%filter(!is.na(lag_adjusted))\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>%mutate(diff = adjusted - lag_adjusted,pct_return = diff / lag_adjusted)\n# Output: sp_500_daily_returns_tbl\n\n\nsp_500_daily_returns_tbl <- sp_500_daily_returns_tbl %>% select(symbol, date, pct_return)\nsp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/01_Company_Segmentation.html#step-2---convert-to-user-item-format",
    "title": "Challenge - Company Segmentation",
    "section": "5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"../../../files/sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n#not needed since I did it correctly above\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format; \n#here, I believe spread function from the tidyr package can be used to spread the date column and create a separate column for each date's percentage return value\nstock_date_matrix_tbl <- sp_500_daily_returns_tbl %>%spread(date, pct_return, fill = 0)\n# Output: \nstock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/01_Company_Segmentation.html#step-3---perform-k-means-clustering",
    "title": "Challenge - Company Segmentation",
    "section": "5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\n#stock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\nstock_date_matrix_num_tbl <- stock_date_matrix_tbl %>% select(-symbol)\nkmeans_obj <- kmeans(stock_date_matrix_num_tbl, centers = 4, nstart = 20)\n\nUse glance() to get the tot.withinss. #total within-cluster sum of squares (tot.withinss)\n\n# Apply glance() to get the tot.withinss\nglance(kmeans_obj)$tot.withinss\n\n#> [1] 29.20555"
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/01_Company_Segmentation.html#step-4---find-the-optimal-value-of-k",
    "title": "Challenge - Company Segmentation",
    "section": "5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\ncenter <- 3\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>% select(-symbol) %>% kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\ncenters_tbl <- tibble(centers = 1:30)\nk_means_mapped_tbl <- centers_tbl %>% mutate(k_means = map(center, kmeans_mapper)) %>% mutate(glance = map(k_means, glance))\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\nk_means_mapped_tbl %>% unnest(glance) %>% ggplot(aes(x = centers, y = tot.withinss)) + geom_point() + geom_line() + labs(title = \"Scree Plot\") + theme_bw()\n\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-5---apply-umap",
    "href": "content/01_journal/01_Company_Segmentation.html#step-5---apply-umap",
    "title": "Challenge - Company Segmentation",
    "section": "5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../../files/k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\numap_results <- stock_date_matrix_tbl %>% select(-symbol) %>% umap()\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\numap_results_tbl <- umap_results$layout %>% as_tibble() %>% bind_cols(stock_date_matrix_tbl %>% select(symbol))\n\n#> Warning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n#> `.name_repair` is omitted as of tibble 2.0.0.\n#> ℹ Using compatibility `.name_repair`.\n\numap_results_tbl\n\n\n\n  \n\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %>% ggplot(aes(x = V1, y = V2)) + geom_point(alpha = 0.5) + theme_tq() + ggtitle(\"UMAP Projection\")\n\n\n\n\n\n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/01_Company_Segmentation.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/01_Company_Segmentation.html#step-6---combine-k-means-and-umap",
    "title": "Challenge - Company Segmentation",
    "section": "5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"../../../files/k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"../../../files/umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj <- k_means_mapped_tbl$k_means[[10]]\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl <- k_means_obj %>% \n  augment(stock_date_matrix_tbl) %>% \n  select(symbol, .cluster) %>% \n  left_join(umap_results_tbl, by = \"symbol\") %>% \n  left_join(sp_500_index_tbl_primary %>% select(symbol, company, sector), by = \"symbol\")\numap_kmeans_results_tbl\n\n\n\n  \n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\nggplot(umap_kmeans_results_tbl, aes(x = V1, y = V2, color = .cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_manual(values = palette_light() %>% rep(3)) +\n  labs(title = \"Plotting K-Means and UMAP results\")\n\n\n\n\n\n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/04_h20.html",
    "href": "content/01_journal/04_h20.html",
    "title": "Challenge - Automated Machine Learning with H20 (II)",
    "section": "",
    "text": "Load the training & test dataset\n\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ readr     2.1.4\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ✔ purrr     1.0.1     \n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ dplyr::filter() masks stats::filter()\n#> ✖ dplyr::lag()    masks stats::lag()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(parsnip)\nlibrary(recipes)\n\n#> \n#> Attaching package: 'recipes'\n#> \n#> The following object is masked from 'package:stringr':\n#> \n#>     fixed\n#> \n#> The following object is masked from 'package:stats':\n#> \n#>     step\n\nlibrary(rsample)\nlibrary(yardstick)\n\n#> \n#> Attaching package: 'yardstick'\n#> \n#> The following object is masked from 'package:readr':\n#> \n#>     spec\n\nlibrary(workflows)\nlibrary(tune)\n\nLoading the Testing and Training Dataset:\n\nproduct_dataset <- read_csv(\"../../files/product_backorders.csv\")\n\n#> Rows: 19053 Columns: 23\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (7): potential_issue, deck_risk, oe_constraint, ppap_risk, stop_auto_bu...\n#> dbl (16): sku, national_inv, lead_time, in_transit_qty, forecast_3_month, fo...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nproduct_dataset_secondary <- product_dataset %>% \n  mutate(\n      product_backorder = went_on_backorder %>% str_to_lower() %>% str_detect(\"yes\") %>% as.numeric()\n  ) %>% \n  select(-c(went_on_backorder))\nglimpse(product_dataset)\n\n#> Rows: 19,053\n#> Columns: 23\n#> $ sku               <dbl> 1113121, 1113268, 1113874, 1114222, 1114823, 1115453…\n#> $ national_inv      <dbl> 0, 0, 20, 0, 0, 55, -34, 4, 2, -7, 1, 2, 0, 0, 0, 0,…\n#> $ lead_time         <dbl> 8, 8, 2, 8, 12, 8, 8, 9, 8, 8, 8, 8, 12, 2, 12, 4, 2…\n#> $ in_transit_qty    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0…\n#> $ forecast_3_month  <dbl> 6, 2, 45, 9, 31, 216, 120, 43, 4, 56, 2, 5, 5, 54, 4…\n#> $ forecast_6_month  <dbl> 6, 3, 99, 14, 31, 360, 240, 67, 6, 96, 4, 9, 6, 72, …\n#> $ forecast_9_month  <dbl> 6, 4, 153, 21, 31, 492, 240, 115, 9, 112, 6, 13, 9, …\n#> $ sales_1_month     <dbl> 0, 1, 16, 5, 7, 30, 83, 5, 1, 13, 0, 1, 0, 0, 1, 0, …\n#> $ sales_3_month     <dbl> 4, 2, 42, 17, 15, 108, 122, 22, 5, 30, 2, 5, 4, 0, 3…\n#> $ sales_6_month     <dbl> 9, 3, 80, 36, 33, 275, 144, 40, 6, 56, 3, 8, 5, 0, 4…\n#> $ sales_9_month     <dbl> 12, 3, 111, 43, 47, 340, 165, 58, 9, 76, 4, 11, 6, 0…\n#> $ min_bank          <dbl> 0, 0, 10, 0, 2, 51, 33, 4, 2, 0, 0, 0, 3, 4, 0, 0, 0…\n#> $ potential_issue   <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ pieces_past_due   <dbl> 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ perf_6_month_avg  <dbl> 0.90, 0.96, 0.81, 0.96, 0.98, 0.00, 1.00, 0.69, 1.00…\n#> $ perf_12_month_avg <dbl> 0.89, 0.97, 0.88, 0.98, 0.98, 0.00, 0.97, 0.68, 0.95…\n#> $ local_bo_qty      <dbl> 0, 0, 0, 0, 0, 0, 34, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, …\n#> $ deck_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ oe_constraint     <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ ppap_risk         <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"No…\n#> $ stop_auto_buy     <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n#> $ rev_stop          <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n#> $ went_on_backorder <chr> \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Ye…\n\n# Splitting the dataset into train and test\nsplit_object<- initial_split(product_dataset_secondary, prop = 0.75)\ntrain_table_final <- training(split_object)\ntest_table_final <- testing(split_object)\n\nSpecifiying response and predictor:\n\nmy_recipe_object <- recipe(product_backorder ~., data = train_table_final) %>% \n    step_zv(all_predictors()) %>% \n    step_dummy(all_nominal(),-all_outcomes()) %>%\n    prep()\n\n\nsummary(my_recipe_object)\n\n\n\n  \n\n\n\n\nglimpse(bake(my_recipe_object,new_data = NULL))\n\n#> Rows: 14,289\n#> Columns: 23\n#> $ sku                 <dbl> 1872718, 3273776, 3124842, 1626845, 1366494, 21803…\n#> $ national_inv        <dbl> 8, 68, 70, 4, 10, 0, 0, 323, 10, 30, 152, 242, 498…\n#> $ lead_time           <dbl> 4, 8, 8, NA, 12, 15, 4, 0, 10, 8, 52, 4, 20, 8, 4,…\n#> $ in_transit_qty      <dbl> 0, 15, 10, 0, 0, 0, 0, 0, 0, 15, 0, 156, 0, 0, 274…\n#> $ forecast_3_month    <dbl> 0, 169, 60, 0, 0, 0, 18, 0, 0, 54, 0, 204, 0, 0, 6…\n#> $ forecast_6_month    <dbl> 0, 289, 120, 0, 0, 0, 18, 250, 0, 99, 0, 444, 0, 0…\n#> $ forecast_9_month    <dbl> 0, 409, 165, 0, 0, 0, 18, 250, 0, 144, 0, 612, 0, …\n#> $ sales_1_month       <dbl> 0, 52, 16, 0, 0, 0, 0, 0, 0, 16, 0, 70, 0, 10, 199…\n#> $ sales_3_month       <dbl> 0, 135, 59, 2, 0, 4, 0, 0, 0, 43, 12, 236, 0, 54, …\n#> $ sales_6_month       <dbl> 0, 261, 116, 8, 0, 5, 0, 0, 0, 98, 15, 455, 0, 99,…\n#> $ sales_9_month       <dbl> 0, 383, 168, 12, 0, 9, 0, 0, 1, 135, 27, 667, 0, 1…\n#> $ min_bank            <dbl> 0, 78, 29, 1, 1, 0, 0, 0, 0, 18, 0, 84, 0, 21, 231…\n#> $ pieces_past_due     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ perf_6_month_avg    <dbl> 0.73, 1.00, 0.66, -99.00, 0.58, 0.90, 0.22, 0.00, …\n#> $ perf_12_month_avg   <dbl> 0.78, 0.90, 0.66, -99.00, 0.58, 0.91, 0.14, 0.00, …\n#> $ local_bo_qty        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1000, 0,…\n#> $ product_backorder   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ potential_issue_Yes <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ deck_risk_Yes       <dbl> 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1,…\n#> $ oe_constraint_Yes   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ ppap_risk_Yes       <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,…\n#> $ stop_auto_buy_Yes   <dbl> 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n#> $ rev_stop_Yes        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\nStarting H2O:\n\nlibrary(h2o)\n\n#> \n#> ----------------------------------------------------------------------\n#> \n#> Your next step is to start H2O:\n#>     > h2o.init()\n#> \n#> For H2O package documentation, ask for help:\n#>     > ??h2o\n#> \n#> After starting H2O, you can use the Web UI at http://localhost:54321\n#> For more information visit https://docs.h2o.ai\n#> \n#> ----------------------------------------------------------------------\n\n\n#> \n#> Attaching package: 'h2o'\n\n\n#> The following objects are masked from 'package:lubridate':\n#> \n#>     day, hour, month, week, year\n\n\n#> The following objects are masked from 'package:stats':\n#> \n#>     cor, sd, var\n\n\n#> The following objects are masked from 'package:base':\n#> \n#>     &&, %*%, %in%, ||, apply, as.factor, as.numeric, colnames,\n#>     colnames<-, ifelse, is.character, is.factor, is.numeric, log,\n#>     log10, log1p, log2, round, signif, trunc\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         17 minutes 32 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 26 days \n#>     H2O cluster name:           H2O_started_from_R_milan_hhk744 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.90 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 26 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n\nRunning AutoML specifying the stopping criterion:\n\nlibrary(h2o)\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         39 minutes 56 seconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 26 days \n#>     H2O cluster name:           H2O_started_from_R_milan_hhk744 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.83 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 26 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nsplit <- h2o.splitFrame(as.h2o(train_table_final), ratios = c(0.75), seed = 42)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o_set <- split[[1]]\nvalid_h2o_set <- split[[2]]\ntest_h2o_set  <- as.h2o(test_table_final)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nresponse <- \"product_backorder\"\npredictors <- setdiff(names(train_h2o_set), response)\n\n\nautoml_h2o_modelling <- h2o.automl(\n  x = predictors,\n  y = response,\n  training_frame    = train_h2o_set,\n  validation_frame  = valid_h2o_set,\n  leaderboard_frame = test_h2o_set,\n  max_runtime_secs  = 60,\n  nfolds            = 5,\n  stopping_metric = \"mae\", stopping_rounds = 3,\n                        stopping_tolerance = 1e-2\n)\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   2%\n#> 12:17:29.782: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#> 12:17:29.789: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:29.789: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |====                                                                  |   5%\n#> 12:17:33.316: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:33.316: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#> 12:17:33.617: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:33.617: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |===========                                                           |  15%\n#> 12:17:38.75: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:38.75: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#> 12:17:39.151: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:39.151: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=============                                                         |  19%\n#> 12:17:41.818: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:41.818: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |==================                                                    |  26%\n#> 12:17:45.717: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:45.717: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=======================                                               |  32%\n#> 12:17:48.567: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:48.567: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=========================                                             |  36%\n#> 12:17:51.781: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:51.781: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |==============================                                        |  43%\n#> 12:17:55.632: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:55.632: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |================================                                      |  46%\n#> 12:17:56.745: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:56.745: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n#> 12:17:58.74: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:58.74: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===================================                                   |  49%\n#> 12:17:59.635: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:17:59.635: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |=======================================                               |  56%\n#> 12:18:04.366: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:18:04.366: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |============================================                          |  63%\n#> 12:18:07.758: _train param, Dropping bad and constant columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:18:07.758: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===============================================                       |  67%\n#> 12:18:09.972: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:18:09.972: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |=================================================                     |  70%\n#> 12:18:11.25: _train param, Dropping unused columns: [potential_issue, ppap_risk, rev_stop, stop_auto_buy, deck_risk, oe_constraint]\n#> 12:18:11.25: _response param, We have detected that your response column has only 2 unique values (0/1). If you wish to train a binary model instead of a regression model, convert your target column to categorical before training.\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |======================================================================| 100%\n\n\nLeaderboard:\n\nautoml_h2o_modelling@leaderboard \n\n#>                                                  model_id      rmse        mse\n#> 1    StackedEnsemble_AllModels_2_AutoML_3_20230604_121729 0.2270740 0.05156262\n#> 2    StackedEnsemble_AllModels_1_AutoML_3_20230604_121729 0.2276583 0.05182829\n#> 3 StackedEnsemble_BestOfFamily_2_AutoML_3_20230604_121729 0.2279641 0.05196765\n#> 4 StackedEnsemble_BestOfFamily_3_AutoML_3_20230604_121729 0.2280226 0.05199432\n#> 5         XGBoost_grid_1_AutoML_3_20230604_121729_model_2 0.2297512 0.05278564\n#> 6                          GBM_4_AutoML_3_20230604_121729 0.2301760 0.05298100\n#>         mae     rmsle mean_residual_deviance\n#> 1 0.1144421 0.1590805             0.05156262\n#> 2 0.1160820 0.1591931             0.05182829\n#> 3 0.1158254 0.1594431             0.05196765\n#> 4 0.1151991 0.1598848             0.05199432\n#> 5 0.1118570 0.1609210             0.05278564\n#> 6 0.1192350 0.1605354             0.05298100\n#> \n#> [25 rows x 6 columns]\n\nautoml_h2o_modelling@leader\n\n#> Model Details:\n#> ==============\n#> \n#> H2ORegressionModel: stackedensemble\n#> Model ID:  StackedEnsemble_AllModels_2_AutoML_3_20230604_121729 \n#> Model Summary for Stacked Ensemble: \n#>                                          key            value\n#> 1                          Stacking strategy cross_validation\n#> 2       Number of base models (used / total)             9/12\n#> 3           # GBM base models (used / total)              4/5\n#> 4       # XGBoost base models (used / total)              3/3\n#> 5           # DRF base models (used / total)              2/2\n#> 6  # DeepLearning base models (used / total)              0/1\n#> 7           # GLM base models (used / total)              0/1\n#> 8                      Metalearner algorithm              GLM\n#> 9         Metalearner fold assignment scheme           Random\n#> 10                        Metalearner nfolds                5\n#> 11                   Metalearner fold_column               NA\n#> 12        Custom metalearner hyperparameters             None\n#> \n#> \n#> H2ORegressionMetrics: stackedensemble\n#> ** Reported on training data. **\n#> \n#> MSE:  0.01999491\n#> RMSE:  0.1414034\n#> MAE:  0.07081871\n#> RMSLE:  0.09971389\n#> Mean Residual Deviance :  0.01999491\n#> \n#> \n#> H2ORegressionMetrics: stackedensemble\n#> ** Reported on validation data. **\n#> \n#> MSE:  0.04926907\n#> RMSE:  0.2219664\n#> MAE:  0.1121348\n#> RMSLE:  0.1567306\n#> Mean Residual Deviance :  0.04926907\n#> \n#> \n#> H2ORegressionMetrics: stackedensemble\n#> ** Reported on cross-validation data. **\n#> ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#> \n#> MSE:  0.05076405\n#> RMSE:  0.2253088\n#> MAE:  0.1137115\n#> RMSLE:  0.1585601\n#> Mean Residual Deviance :  0.05076405\n#> \n#> \n#> Cross-Validation Metrics Summary: \n#>                              mean        sd cv_1_valid cv_2_valid cv_3_valid\n#> mae                      0.113692  0.002561   0.114250   0.110499   0.117107\n#> mean_residual_deviance   0.050711  0.002629   0.051282   0.047497   0.054659\n#> mse                      0.050711  0.002629   0.051282   0.047497   0.054659\n#> null_deviance          223.521880 10.802477 232.831180 219.019930 236.307000\n#> r2                       0.512421  0.018897   0.519752   0.539812   0.488705\n#> residual_deviance      109.020850  7.842339 111.795260 100.788520 120.797165\n#> rmse                     0.225131  0.005814   0.226456   0.217938   0.233793\n#> rmsle                    0.158430  0.003556   0.159150   0.153994   0.163547\n#>                        cv_4_valid cv_5_valid\n#> mae                      0.111933   0.114672\n#> mean_residual_deviance   0.049532   0.050584\n#> mse                      0.049532   0.050584\n#> null_deviance          210.162950 219.288330\n#> r2                       0.507744   0.506092\n#> residual_deviance      103.422600 108.300710\n#> rmse                     0.222558   0.224909\n#> rmsle                    0.156461   0.159000\n\n?h2o.deeplearning\n\n\nextract_h2o_model <- function(h2o_leaderboard, n = 1, verbose = T) {\n    h2o_model_name <- h2o_leaderboard %>%\n        as.tibble() %>%\n        slice_(n) %>%\n        pull(model_id)\n    \n    if (verbose) message(h2o_model_name)\n    return(h2o_model_name)\n}\n\nLeader Model Prediction:\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         3 hours 10 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 26 days \n#>     H2O cluster name:           H2O_started_from_R_milan_hhk744 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.75 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 26 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\noptimum_model <- automl_h2o_modelling@leaderboard %>% \n  extract_h2o_model(1) %>% \n  h2o.getModel()\n\n#> Warning: `slice_()` was deprecated in dplyr 0.7.0.\n#> ℹ Please use `slice()` instead.\n\n\n#> Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#> ℹ Please use `as_tibble()` instead.\n#> ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#> StackedEnsemble_AllModels_2_AutoML_3_20230604_121729\n\n\n\nh2o.init()\n\n#>  Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         3 hours 10 minutes \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 26 days \n#>     H2O cluster name:           H2O_started_from_R_milan_hhk744 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   1.75 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 26 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\nh20_predictions <- h2o.predict(optimum_model, newdata = as.h2o(test_table_final))\n\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#> \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(h20_predictions)\n\n#> [1] \"environment\"\n\nh20_predictions_tbl <- h20_predictions %>% as_tibble()\n\n\nglimpse(h20_predictions_tbl)\n\n#> Rows: 4,764\n#> Columns: 1\n#> $ predict <dbl> 0.8564444, 0.4372353, 0.7754818, 0.5424764, 0.1062112, 0.51310…\n\n\nLeader model save to local memory:\n\noptimum_model %>% h2o.saveModel(path = \"Challenge_H20_Leader_Model_20230604\")\n\n#> [1] \"/Users/milan/Documents/study/SEM2/BDS/grading/ss23-bdml-milan-15697/content/01_journal/Challenge_H20_Leader_Model_20230604/StackedEnsemble_AllModels_2_AutoML_3_20230604_121729\"\n\n\nFooter"
  },
  {
    "objectID": "content/01_journal/02_Regression.html",
    "href": "content/01_journal/02_Regression.html",
    "title": "Challenge - Supervised ML - Regression (II)",
    "section": "",
    "text": "library(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(workflows)\nlibrary(tune)\nlibrary(xgboost)\n\n#> \n#> Attaching package: 'xgboost'\n\n\n#> The following object is masked from 'package:dplyr':\n#> \n#>     slice\n\n\n#Challenge Answer:\nReading the Data:\n\nbike_data <- readRDS(\"../../files/bike_features_tbl.rds\") %>% select(-c(\"Brake Rotor\"))\nbike_data\n\n\n\n  \n\n\n\nProcessing Initial Features:\n\nbike_data_processed <- bike_data %>%\n  select(model:url, `Rear Derailleur`, `Shift Lever`) %>%\n  mutate(\n      `shimano dura-ace`        = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano dura-ace \") %>% as.numeric(),\n      `shimano ultegra`         = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano ultegra \") %>% as.numeric(),\n      `shimano 105`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano 105 \") %>% as.numeric(),\n      `shimano tiagra`          = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano tiagra \") %>% as.numeric(),\n      `Shimano sora`            = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano sora\") %>% as.numeric(),\n      `shimano deore`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore(?! xt)\") %>% as.numeric(),\n      `shimano slx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano slx\") %>% as.numeric(),\n      `shimano grx`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano grx\") %>% as.numeric(),\n      `Shimano xt`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano deore xt |shimano xt \") %>% as.numeric(),\n      `Shimano xtr`             = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano xtr\") %>% as.numeric(),\n      `Shimano saint`           = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"shimano saint\") %>% as.numeric(),\n      `SRAM red`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram red\") %>% as.numeric(),\n      `SRAM force`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram force\") %>% as.numeric(),\n      `SRAM rival`              = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram rival\") %>% as.numeric(),\n      `SRAM apex`               = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram apex\") %>% as.numeric(),\n      `SRAM xx1`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram xx1\") %>% as.numeric(),\n      `SRAM x01`                = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram x01|sram xo1\") %>% as.numeric(),\n      `SRAM gx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram gx\") %>% as.numeric(),\n      `SRAM nx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram nx\") %>% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n      `SRAM sx`                 = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"sram sx\") %>% as.numeric(),\n      `Campagnolo potenza`      = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo potenza\") %>% as.numeric(),\n      `Campagnolo super record` = `Rear Derailleur` %>% str_to_lower() %>% str_detect(\"campagnolo super record\") %>% as.numeric(),\n      `shimano nexus`           = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano nexus\") %>% as.numeric(),\n      `shimano alfine`          = `Shift Lever`     %>% str_to_lower() %>% str_detect(\"shimano alfine\") %>% as.numeric()\n  ) %>%\n  select(-c(`Rear Derailleur`, `Shift Lever`)) %>%\n  mutate_if(is.numeric, ~replace(., is.na(.), 0))\nbike_data_processed\n\n\n\n  \n\n\n\nUsing Recepies package to create features:\n\n# Build features using recipes\nset.seed(42)\ndata_split <- initial_split(bike_data_processed, prop = 3/4)\ntrain_data <- training(data_split)\ntest_data <- testing(data_split)\n\ntrain_recipe <- recipe(price ~ ., data = train_data) %>%\n  step_dummy(all_nominal(), -all_outcomes())\n\nBaking the recipe:\n\ntrain_transformed_tbl <- bake(prep(train_recipe), new_data = NULL)\ntest_transformed_tbl <- bake(prep(train_recipe), new_data = test_data)\n\n#> Warning: There are new levels in a factor: Aeroad CF SLX 9.0 Di2, Aeroad CF SL\n#> 7.0, Aeroad CF SL 8.0, Endurace WMN AL 7.0, Endurace AL 6.0, Endurace WMN AL\n#> 6.0, Endurace CF SLX Disc 9.0 Di2, Endurace CF SLX Disc 8.0 ETAP, Endurace CF\n#> SL Disc 8.0 Aero Di2, Endurace CF SL Disc 8.0 Di2, Inflite 5, Speedmax CF 8.0\n#> SL, Speedmax WMN CF 8.0 Di2, Speedmax WMN CF 8.0 LTD, Speedmax CF 8.0 Di2,\n#> Speedmax CF SLX 8.0, Speedmax WMN CF SLX 8.0 SL, Speedmax WMN CF 8.0, Ultimate\n#> CFR Disc Di2, Ultimate CF SLX 9.0 ETAP, Ultimate CF SL Disc 8.0 Di2, Ultimate\n#> CF SL Disc 8.0, Ultimate CF SL Disc 7.0, Exceed CF 6, Exceed CF SLX 9.0, Grail\n#> CF SL 8 WMN Di2, Grail 6, Grand Canyon:ON AL 9.0, Grand Canyon:ON WMN AL 8.0,\n#> Lux CF 8, Lux CF SLX 9 LTD, Neuron CF 9 WMN, Neuron 7 WMN, Neuron Young Hero,\n#> Neuron AL 6.0, Neuron:ON WMN 7.0, Spectral CF 8, Spectral WMN CFR 9.0,\n#> Spectral:ON CF 7.0, Spectral:ON WMN CF 7.0, Stitched 360 Pro, Strive CFR,\n#> Strive CF 8.0, Torque CF 8.0, Torque CF 9.0, Pathlite:ON 7, Pathlite:ON 6,\n#> Pathlite:ON 9.0, Commuter 5.0, Commuter Sport 8.0, Commuter Sport 5.0, Pathlite\n#> 7 WMN, Pathlite AL SL 8.0, Roadlite AL SL 8.0, Roadlite WMN AL SL 8.0, Roadlite\n#> WMN CF 8.0\n\n\n#> Warning: There are new levels in a factor:\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-slx-9.0-di2/2091.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-7.0/2086.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-8.0/2087.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-7.0/2384.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-al-6.0/2391.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-6.0/2383.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-slx-disc-9.0-di2/2400.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-slx-disc-8.0-etap/2398.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0-aero-di2/2397.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0-di2/2186.html,\n#> https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-5/2655.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-7.0/2419.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0-sl/2139.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0-di2/2111.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0-ltd/2112.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0-di2/2140.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-8.0/2423.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-slx-8.0-sl/2113.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0/2422.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cfr-disc-di2/2762.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-9.0-etap/2407.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-8.0-di2/2159.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-8.0/2157.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-7.0/2156.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-6/2638.html,\n#> https://www.canyon.com/en-de/global-campaigns/end-of-season-sale/exceed-cf-slx-9.0/2430.html,\n#> https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8-wmn-di2/2706.html,\n#> https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-6/2369.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/grandcanyon-on/grand-canyon-on-al-9.0/2254.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/grandcanyon-on/grand-canyon-on-wmn-al-8.0/2252.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-8/2648.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9-ltd/2651.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-9-wmn/2631.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-7-wmn/2628.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-young-hero/2624.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-al-6.0/2467.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/neuron-on/neuron-on-wmn-7.0/2255.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-8/2677.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-wmn-cfr-9.0/2238.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-cf-7.0/2260.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-wmn-cf-7.0/2259.html,\n#> https://www.canyon.com/en-de/mountain-bikes/dirt-jump-bikes/stitched/stitched-360-pro/2367.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cfr/2242.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cf-8.0/2240.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-8.0/2247.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-9.0/2248.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-9.0/2017.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-7/2800.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-6/2799.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-9.0/2343.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-5.0/1955.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-sport-8.0/1960.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-sport-5.0/1959.html,\n#> https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-7-wmn/2795.html,\n#> https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-al-sl-8.0/2335.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-al-sl-8.0/2345.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-wmn-al-sl-8.0/2347.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-wmn-cf-8.0/1976.html\n\ntrain_transformed_tbl\n\n\n\n  \n\n\ntest_transformed_tbl\n\n\n\n  \n\n\n\nBuilding xgboost model\n\nset.seed(42)\nxgboost_model <- boost_tree(\n  mode = \"regression\",\n  mtry = 30,\n  learn_rate = 0.1,\n  tree_depth = 10\n) %>%\n  set_engine(\"xgboost\")\n\nUsing workflow package:\n\nworkflow_model <- workflow() %>%\n  add_model(xgboost_model) %>%\n  add_recipe(train_recipe)\n\nFitting the workflow:\n\nmodel_fit <- fit(workflow_model, data = train_data)\n\nModel predictions and evaluation metrics:\n\nmodel_predictions <- predict(model_fit, new_data = test_data) %>%\n  bind_cols(test_data %>% select(price))\n\n#> Warning: There are new levels in a factor: Aeroad CF SLX 9.0 Di2, Aeroad CF SL\n#> 7.0, Aeroad CF SL 8.0, Endurace WMN AL 7.0, Endurace AL 6.0, Endurace WMN AL\n#> 6.0, Endurace CF SLX Disc 9.0 Di2, Endurace CF SLX Disc 8.0 ETAP, Endurace CF\n#> SL Disc 8.0 Aero Di2, Endurace CF SL Disc 8.0 Di2, Inflite 5, Speedmax CF 8.0\n#> SL, Speedmax WMN CF 8.0 Di2, Speedmax WMN CF 8.0 LTD, Speedmax CF 8.0 Di2,\n#> Speedmax CF SLX 8.0, Speedmax WMN CF SLX 8.0 SL, Speedmax WMN CF 8.0, Ultimate\n#> CFR Disc Di2, Ultimate CF SLX 9.0 ETAP, Ultimate CF SL Disc 8.0 Di2, Ultimate\n#> CF SL Disc 8.0, Ultimate CF SL Disc 7.0, Exceed CF 6, Exceed CF SLX 9.0, Grail\n#> CF SL 8 WMN Di2, Grail 6, Grand Canyon:ON AL 9.0, Grand Canyon:ON WMN AL 8.0,\n#> Lux CF 8, Lux CF SLX 9 LTD, Neuron CF 9 WMN, Neuron 7 WMN, Neuron Young Hero,\n#> Neuron AL 6.0, Neuron:ON WMN 7.0, Spectral CF 8, Spectral WMN CFR 9.0,\n#> Spectral:ON CF 7.0, Spectral:ON WMN CF 7.0, Stitched 360 Pro, Strive CFR,\n#> Strive CF 8.0, Torque CF 8.0, Torque CF 9.0, Pathlite:ON 7, Pathlite:ON 6,\n#> Pathlite:ON 9.0, Commuter 5.0, Commuter Sport 8.0, Commuter Sport 5.0, Pathlite\n#> 7 WMN, Pathlite AL SL 8.0, Roadlite AL SL 8.0, Roadlite WMN AL SL 8.0, Roadlite\n#> WMN CF 8.0\n\n\n#> Warning: There are new levels in a factor:\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-slx-9.0-di2/2091.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-7.0/2086.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-8.0/2087.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-7.0/2384.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-al-6.0/2391.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-6.0/2383.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-slx-disc-9.0-di2/2400.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-slx-disc-8.0-etap/2398.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0-aero-di2/2397.html,\n#> https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0-di2/2186.html,\n#> https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-5/2655.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-7.0/2419.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0-sl/2139.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0-di2/2111.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0-ltd/2112.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0-di2/2140.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-8.0/2423.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-slx-8.0-sl/2113.html,\n#> https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-8.0/2422.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cfr-disc-di2/2762.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-9.0-etap/2407.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-8.0-di2/2159.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-8.0/2157.html,\n#> https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-7.0/2156.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-6/2638.html,\n#> https://www.canyon.com/en-de/global-campaigns/end-of-season-sale/exceed-cf-slx-9.0/2430.html,\n#> https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8-wmn-di2/2706.html,\n#> https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-6/2369.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/grandcanyon-on/grand-canyon-on-al-9.0/2254.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/grandcanyon-on/grand-canyon-on-wmn-al-8.0/2252.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-8/2648.html,\n#> https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9-ltd/2651.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-9-wmn/2631.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-7-wmn/2628.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-young-hero/2624.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-al-6.0/2467.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/neuron-on/neuron-on-wmn-7.0/2255.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-8/2677.html,\n#> https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-wmn-cfr-9.0/2238.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-cf-7.0/2260.html,\n#> https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-wmn-cf-7.0/2259.html,\n#> https://www.canyon.com/en-de/mountain-bikes/dirt-jump-bikes/stitched/stitched-360-pro/2367.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cfr/2242.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cf-8.0/2240.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-8.0/2247.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-9.0/2248.html,\n#> https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-9.0/2017.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-7/2800.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-6/2799.html,\n#> https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-9.0/2343.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-5.0/1955.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-sport-8.0/1960.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-sport-5.0/1959.html,\n#> https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-7-wmn/2795.html,\n#> https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-al-sl-8.0/2335.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-al-sl-8.0/2345.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-wmn-al-sl-8.0/2347.html,\n#> https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-wmn-cf-8.0/1976.html\n\nevaluation_metrics <- metrics(truth = price, estimate = .pred, data = model_predictions)\n\nSome tuning:\n\nfolds <- vfold_cv(train_data, v = 10)\ntuned_workflow <- workflow_model %>%\n  fit_resamples(resamples = folds)\n\n#> → A | warning: There are new levels in a factor: Grand Canyon 9, Endurace CF SL Disc 8.0 Pro, Exceed CF 5 WMN, Aeroad CF SLX 9.0 SL, Roadlite:ON AL 7.0, Precede:ON CF 9, Roadlite:ON AL 8.0, Exceed CFR Team, Dude CF 9.0 Trail, Lux CF SLX 9.0 Team, Endurace WMN AL Disc 6.0, Endurace WMN CF SL Disc 8.0, Precede:ON CF 9 ST, Grand Canyon 5 WMN, Torque AL 5.0, Ultimate CF SL Disc 8.0 Di2 Aero, Neuron CF 9, There are new levels in a factor: https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-9/2621.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0-pro/2509.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-5-wmn/2637.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-slx-9.0-sl/2225.html, https://www.canyon.com/en-de/e-bikes/e-fitness-bikes/roadlite-on/roadlite-on-al-7.0/2293.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-slx-9/2657.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/precede-on/precede-on-cf-9/2804.html, https://www.canyon.com/en-de/e-bikes/e-fitness-bikes/roadlite-on/roadlite-on-al-8.0/2294.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cfr-team/2643.html, https://www.canyon.com/en-de/mountain-bikes/fat-bikes/dude/dude-cf-9.0-trail/2465.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9.0-team/2438.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-disc-6.0/2385.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-cf-sl-disc-8.0/2388.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/precede-on/precede-on-cf-9-st/2928.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-5-wmn/2614.html, https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-al-5.0/2244.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-disc-8.0-di2-aero/2410.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-9/2630.html\n\n\n#> There were issues with some computations   A: x1\n\n\n#> → B | warning: There are new levels in a factor: Neuron 6 WMN, Roadlite CF 7.0, Endurace CF SLX Disc 9.0 ETAP, Pathlite WMN AL 6.0, Ultimate CF SLX 8.0 Di2, Pathlite 5 WMN, Grand Canyon 7, Grail:ON CF 7, Ultimate CF SL 7.0, Ultimate CF SL 8.0 Di2, Aeroad CF SL 8.0 Di2, Endurace AL 7.0, Commuter:ON 7 WMN, Spectral WMN CF 8.0, Lux CF SLX 9.0, Pathlite AL 6.0, Lux CF SL 6.0, Dude CF 8.0 Trail, There are new levels in a factor: https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-6-wmn/2626.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-cf-7.0/1973.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-slx-disc-9.0-etap/2399.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-wmn-al-6.0/2336.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-8.0-di2/2406.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-5-wmn/2791.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-7/2617.html, https://www.canyon.com/en-de/e-bikes/e-gravel-bikes/grail-on/grail-on-cf-7/2551.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-7.0/2510.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-8.0-di2/2152.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-8.0-di2/2088.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-al-7.0/2392.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/commuter-on/commuter-on-7-wmn/2926.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-wmn-cf-8.0/2237.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9.0/2437.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-al-6.0/2333.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-sl-6.0/2433.html, https://www.canyon.com/en-de/mountain-bikes/fat-bikes/dude/dude-cf-8.0-trail/2464.html\n\n\n#> There were issues with some computations   A: x1\n→ C | warning: There are new levels in a factor: Ultimate WMN CF SLX Disc 9.0 ETAP, Grand Canyon 5, Aeroad CF SL Disc 8.0, Lux CF SLX 9.0 Race Limited, Aeroad CF SLX Disc 9.0 ETAP, Endurace:ON 7.0, Grand Canyon Young Hero, Roadlite 6 WMN, Endurace CF 7.0, Pathlite:ON 6.0, Neuron CF 9 SL, Endurace AL Disc 6.0, Strive CF 7.0, Grail CF SLX 8 eTap, Grail CF SL 8 eTap, Aeroad WMN CF SL 8.0, Pathlite:ON 8.0, Roadlite AL 7.0, There are new levels in a factor: E-Road, There are new levels in a factor: Endurace:ON, There are new levels in a factor: https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-wmn-cf-slx-disc-9.0-etap/2405.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-5/2613.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-disc-8.0/2877.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9.0-race-limited/2439.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-slx-disc-9.0-etap/2873.html, https://www.canyon.com/en-de/e-bikes/e-road-bikes/endurace-on/endurace-on-7.0/2486.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-young-hero/2653.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-6-wmn/2783.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-7.0/2508.html, https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-6.0/2340.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-9-sl/2632.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-al-disc-6.0/2393.html, https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cf-7.0/2239.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-slx-8-etap/2720.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8-etap/2719.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-wmn-cf-sl-8.0/2120.html, https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-8.0/2342.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-al-7.0/2344.html\n#> There were issues with some computations   A: x1\n→ D | warning: There are new levels in a factor: Lux CF 6, Lux CF SLX 9 Team, Spectral 6 WMN, Exceed CF SLX 9.0 Race, Roadlite 5 WMN, Sender CFR FMD, Neuron AL 7.0, Precede:ON CF 8, Roadlite CF 9.0, Neuron WMN AL 7.0, Exceed CF SLX 9.0 Race LTD, Aeroad CF SL Disc 8.0 Di2, Spectral 6, Pathlite:ON 7.0, Exceed CF 7 WMN, Speedmax CF SLX 8.0 SL, Grand Canyon:ON AL 8.0, There are new levels in a factor: Grand Canyon:ON, There are new levels in a factor: https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-6/2645.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9-team/2650.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-6-wmn/2680.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-slx-9.0-race/2431.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-5-wmn/2781.html, https://www.canyon.com/en-de/mountain-bikes/downhill-bikes/sender/sender-cfr-fmd/2250.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-al-7.0/2468.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/precede-on/precede-on-cf-8/2803.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-cf-9.0/1977.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-wmn-al-7.0/2470.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-slx-9.0-race-ltd/2432.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-disc-8.0-di2/2875.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-6/2675.html, https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-7.0/2341.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-7-wmn/2640.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-8.0-sl/2143.html, https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/grandcanyon-on/grand-canyon-on-al-8.0/2253.html\n#> There were issues with some computations   A: x1\n→ E | warning: There are new levels in a factor: Ultimate CF SLX Disc 9.0 Team Movistar, Ultimate WMN CF SL Disc 8.0, Grail CF SL 7 WMN, Speedmax CF SLX 9.0 LTD, Speedmax CF 8.0, Lux CF SL 8.0, Roadlite:ON AL 9.0, Grail CF SL 8, Pathlite 5, Ultimate WMN CF SL Disc 8.0 ETAP, Grand Canyon 8 WMN, Grail CF SL 8 Di2, Spectral:ON CF 8.0, Grand Canyon 7 WMN, Commuter 3.0, Pathlite 6 WMN, Lux CF 7 WMN, There are new levels in a factor: https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-disc-9.0-team-movistar/2207.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-wmn-cf-sl-disc-8.0/2402.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-7-wmn/2378.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-9.0-ltd/2145.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0/2420.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-sl-8.0/2436.html, https://www.canyon.com/en-de/e-bikes/e-fitness-bikes/roadlite-on/roadlite-on-al-9.0/2324.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8/2717.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-5/2790.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-wmn-cf-sl-disc-8.0-etap/2404.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-8-wmn/2620.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8-di2/2718.html, https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-cf-8.0/2261.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-7-wmn/2618.html, https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-3.0/1953.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-6-wmn/2793.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-7-wmn/2647.html\n#> There were issues with some computations   A: x1\n→ F | warning: There are new levels in a factor: Grail 7 1by, Neuron CF 8, Aeroad CF SL Disc 8.0 ETAP, Stitched 360, Grand Canyon 6, Neuron CF SLX 9, Commuter:ON 7, Grail:ON CF 8 eTap, Spectral CF 9.0, Neuron 7, Inflite CF SLX 9 Team, Torque AL 6.0, Ultimate CF SLX Disc 9.0 ETAP, Grail 7 WMN, Endurace CF SL Disc 7.0, Grail 7, There are new levels in a factor: https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-7-1by/2707.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-8/2629.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-sl-disc-8.0-etap/2876.html, https://www.canyon.com/en-de/mountain-bikes/dirt-jump-bikes/stitched/stitched-360/2366.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-6/2615.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-slx-9/2634.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/commuter-on/commuter-on-7/2356.html, https://www.canyon.com/en-de/e-bikes/e-gravel-bikes/grail-on/grail-on-cf-8-etap/2553.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-9.0-di2/2165.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-9.0/2233.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-7/2627.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-slx-9-team/2658.html, https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-al-6.0/2245.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-disc-9.0-etap/2413.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-7-wmn/2373.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-7.0/2396.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-7/2370.html\n#> There were issues with some computations   A: x1\n→ G | warning: There are new levels in a factor: Speedmax CF SLX 9.0 TT, Speedmax CF SLX 9.0 SL, Endurace WMN CF SL Disc 7.0, Grail:ON CF 7 WMN, Aeroad CF SLX Disc 9.0 Di2, Lux CF SLX 9, Grail:ON CF 8, Precede:ON CF 8 ST, Grail 6 WMN, Grail CF SLX 8.0 Di2, Spectral:ON CF 9.0, Grand Canyon 8, Roadlite 5, Inflite CF SL 7, Exceed CF 7, Commuter 4.0, Lux CF 7, There are new levels in a factor: Adventure, There are new levels in a factor: https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-9.0-tt/2146.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-slx-9.0-sl/2144.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-cf-sl-disc-7.0/2507.html, https://www.canyon.com/en-de/e-bikes/e-gravel-bikes/grail-on/grail-on-cf-7-wmn/2722.html, https://www.canyon.com/en-de/road-bikes/race-bikes/aeroad/aeroad-cf-slx-disc-9.0-di2/2874.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-slx-9/2649.html, https://www.canyon.com/en-de/e-bikes/e-gravel-bikes/grail-on/grail-on-cf-8/2552.html, https://www.canyon.com/en-de/e-bikes/e-city-bikes/precede-on/precede-on-cf-8-st/2927.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-6-wmn/2372.html, https://www.canyon.com/en-de/global-campaigns/end-of-season-sale/grail-cf-slx-8.0-di2/2382.html, https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/spectral-on/spectral-on-cf-9.0/2262.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-8/2619.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-5/2780.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-sl-7/2656.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-7/2639.html, https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-4.0/1954.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/lux/lux-cf-7/2646.html\n#> There were issues with some computations   A: x1\n→ H | warning: There are new levels in a factor: Neuron:ON 9.0, Neuron:ON 8.0, Ultimate CFR Disc EPS, Commuter 6.0, Sender CFR, Stitched 720, Pathlite AL SL 7.0, Endurace CF 8.0, Ultimate CF SL 8.0, Exceed CF SLX 8, Ultimate WMN CF SL Disc 7.0, Neuron:ON 7.0, Endurace CF SL Disc 8.0, Endurace WMN CF SL Disc 8.0 Di2, Grail CF SLX 8 Di2, Spectral CFR 9.0, There are new levels in a factor: Neuron:ON, There are new levels in a factor: https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/neuron-on/neuron-on-9.0/2258.html, https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/neuron-on/neuron-on-8.0/2257.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cfr-disc-eps/2763.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-sl-8/2779.html, https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-6.0/1956.html, https://www.canyon.com/en-de/mountain-bikes/downhill-bikes/sender/sender-cfr/2251.html, https://www.canyon.com/en-de/mountain-bikes/dirt-jump-bikes/stitched/stitched-720/2368.html, https://www.canyon.com/en-de/hybrid-city/touring-bikes/pathlite/pathlite-al-sl-7.0/2334.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-8.0/2182.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-sl-8.0/2151.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-slx-8/2641.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-wmn-cf-sl-disc-7.0/2401.html, https://www.canyon.com/en-de/e-bikes/e-mountain-bikes/neuron-on/neuron-on-7.0/2256.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-cf-sl-disc-8.0/2185.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-cf-sl-disc-8.0-di2/2135.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-slx-8-di2/2721.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cfr-9.0/2234.html\n#> There were issues with some computations   A: x1\nThere were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x…\n#> → I | warning: There are new levels in a factor: Roadlite CF 8.0, Spectral CF 9, Grail CF SL 8.0 ETAP, Commuter 8.0, Torque CF 7.0, Endurace WMN AL Disc 7.0, Speedmax CF 8.0 LTD, Speedmax WMN CF 7.0, Exceed CF 5, Neuron 6, Inflite CF SL 6, Ultimate CF SLX Disc 8.0 ETAP, Sender 6, Roadlite CF 9.0 LTD, Spectral 5, There are new levels in a factor: https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-cf-8.0/1975.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-9/2678.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-8.0-etap/2377.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-sl-8/2443.html, https://www.canyon.com/en-de/hybrid-city/citybikes/commuter/commuter-8.0/1958.html, https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/torque/torque-cf-7.0/2246.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-wmn-al-disc-7.0/2386.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-8.0-ltd/2141.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-wmn-cf-7.0/2421.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-5/2636.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-6/2625.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-9.0-di2/2408.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-sl-6/2778.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-disc-8.0-etap/2411.html, https://www.canyon.com/en-de/mountain-bikes/downhill-bikes/sender/sender-6/2249.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-cf-9.0-ltd/1979.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-5/2674.html\n#> There were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x…\n→ J | warning: There are new levels in a factor: Spectral CF 7 WMN, Grail CF SL 7, Strive CF 9.0, Exceed CFR LTD, Neuron CF 9.0 SL, Speedmax CF 7.0, Pathlite:ON 5.0, Ultimate CF SLX Disc 9.0 Di2, Spectral CF 7, Exceed CF SLX 9, Neuron CF LTD, Endurace AL Disc 7.0, Roadlite WMN CF 7.0, Grand Canyon 6 WMN, Roadlite 6, Ultimate WMN CF SL Disc 8.0 Di2, There are new levels in a factor: https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-7-wmn/2681.html, https://www.canyon.com/en-de/gravel-bikes/all-road/grail/grail-cf-sl-7/2374.html, https://www.canyon.com/en-de/mountain-bikes/enduro-bikes/strive/strive-cf-9.0/2241.html, https://www.canyon.com/en-de/road-bikes/cyclocross-bikes/inflite/inflite-cf-slx-9/2444.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cfr-ltd/2644.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-9.0-sl/2473.html, https://www.canyon.com/en-de/road-bikes/triathlon-bikes/speedmax/speedmax-cf-7.0/2137.html, https://www.canyon.com/en-de/e-bikes/e-trekking-bikes/pathlite-on/pathlite-on-5.0/2339.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-cf-slx-disc-9.0-di2/2412.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/spectral/spectral-cf-7/2676.html, https://www.canyon.com/en-de/mountain-bikes/cross-country-bikes/exceed/exceed-cf-slx-9/2642.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/neuron/neuron-cf-ltd/2633.html, https://www.canyon.com/en-de/road-bikes/endurance-bikes/endurace/endurace-al-disc-7.0/2394.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-wmn-cf-7.0/1974.html, https://www.canyon.com/en-de/mountain-bikes/trail-bikes/grand-canyon/grand-canyon-6-wmn/2616.html, https://www.canyon.com/en-de/hybrid-city/citybikes/roadlite/roadlite-6/2782.html, https://www.canyon.com/en-de/road-bikes/race-bikes/ultimate/ultimate-wmn-cf-sl-disc-8.0-di2/2403.html\n#> There were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x…\nThere were issues with some computations   A: x1   B: x1   C: x1   D: x1   E: x…\n\n\nEvaluation of Model:\n\nbest_model <- show_best(tuned_workflow, metric = \"rmse\")\nall_metrics <- collect_metrics(tuned_workflow)\nbest_model\n\n\n\n  \n\n\nall_metrics"
  },
  {
    "objectID": "content/01_journal/03_h20.html",
    "href": "content/01_journal/03_h20.html",
    "title": "Challenge - Automated Machine Learning with H2O",
    "section": "",
    "text": "library(h2o)\nh2o.init()\n\n#> \n#> H2O is not running yet, starting it now...\n#> \n#> Note:  In case of errors look at the following log files:\n#>     /var/folders/f_/3vvxb_bs6p3c7k7n066wwd5c0000gn/T//Rtmp7DKSOk/file7b8670e34dfb/h2o_milan_started_from_r.out\n#>     /var/folders/f_/3vvxb_bs6p3c7k7n066wwd5c0000gn/T//Rtmp7DKSOk/file7b865b14d3a3/h2o_milan_started_from_r.err\n#> \n#> \n#> Starting H2O JVM and connecting: ... Connection successful!\n#> \n#> R is connected to the H2O cluster: \n#>     H2O cluster uptime:         3 seconds 16 milliseconds \n#>     H2O cluster timezone:       Europe/Berlin \n#>     H2O data parsing timezone:  UTC \n#>     H2O cluster version:        3.40.0.1 \n#>     H2O cluster version age:    3 months and 25 days \n#>     H2O cluster name:           H2O_started_from_R_milan_qkr750 \n#>     H2O cluster total nodes:    1 \n#>     H2O cluster total memory:   2.00 GB \n#>     H2O cluster total cores:    8 \n#>     H2O cluster allowed cores:  8 \n#>     H2O cluster healthy:        TRUE \n#>     H2O Connection ip:          localhost \n#>     H2O Connection port:        54321 \n#>     H2O Connection proxy:       NA \n#>     H2O Internal Security:      FALSE \n#>     R Version:                  R version 4.3.0 (2023-04-21)\n\n\n#> Warning in h2o.clusterInfo(): \n#> Your H2O cluster version is (3 months and 25 days) old. There may be a newer version available.\n#> Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n\n\n\nlibrary(readr)\nlibrary(tidyverse)\n\n#> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#> ✔ dplyr     1.1.2     ✔ purrr     1.0.1\n#> ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#> ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#> ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#> ✖ lubridate::day()   masks h2o::day()\n#> ✖ dplyr::filter()    masks stats::filter()\n#> ✖ lubridate::hour()  masks h2o::hour()\n#> ✖ dplyr::lag()       masks stats::lag()\n#> ✖ lubridate::month() masks h2o::month()\n#> ✖ lubridate::week()  masks h2o::week()\n#> ✖ lubridate::year()  masks h2o::year()\n#> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n\n\nemployee_attrition_tbl <- read_csv(\"../../files/datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\", )\n\n#> Rows: 1470 Columns: 35\n#> ── Column specification ────────────────────────────────────────────────────────\n#> Delimiter: \",\"\n#> chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#> dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#> \n#> ℹ Use `spec()` to retrieve the full column specification for this data.\n#> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nemployee_attrition_tbl\n\n\n\n  \n\n\n\n\n# Data subset\ndept_job_role_tbl <- employee_attrition_tbl %>%\n  select(EmployeeNumber, Department, JobRole, PerformanceRating, Attrition)\n\ndept_job_role_tbl %>%\n  group_by(Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n  mutate(pct = n / sum(n))\n\n\n\n  \n\n\n\n\ndept_job_role_tbl %>%\n\n  group_by(Department, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  group_by(Department) %>%\n  mutate(pct = n / sum(n))\n\n#> `summarise()` has grouped output by 'Department'. You can override using the\n#> `.groups` argument.\n\n\n\n\n  \n\n\n\n\n# Attrition by job role\ndept_job_role_tbl %>%\n\n  # Block 1\n  group_by(Department, JobRole, Attrition) %>%\n  summarize(n = n()) %>%\n  ungroup() %>%\n\n  # Block 2\n  group_by(Department, JobRole) %>%\n  mutate(pct = n / sum(n)) %>%\n  ungroup() %>%\n\n  # Block 3\n  filter(Attrition %in% \"Yes\") %>%\n  arrange(desc(pct)) %>%\n  mutate(\n    above_industry_avg = case_when(\n      pct > 0.088 ~ \"Yes\",\n      TRUE ~ \"No\"\n    )\n  )\n\n#> `summarise()` has grouped output by 'Department', 'JobRole'. You can override\n#> using the `.groups` argument.\n\n\n\n\n  \n\n\n\n\n# Function to calculate attrition cost\ncalculate_attrition_cost <- function(\n\n  # Employee\n  n                    = 1,\n  salary               = 80000,\n\n  # Direct Costs\n  separation_cost      = 500,\n  vacancy_cost         = 10000,\n  acquisition_cost     = 4900,\n  placement_cost       = 3500,\n\n  # Productivity Costs\n  net_revenue_per_employee = 250000,\n  workdays_per_year        = 240,\n  workdays_position_open   = 40,\n  workdays_onboarding      = 60,\n  onboarding_efficiency    = 0.50\n\n) {\n\n  # Direct Costs\n  direct_cost <- sum(separation_cost, vacancy_cost, acquisition_cost, placement_cost)\n\n  # Lost Productivity Costs\n  productivity_cost <- net_revenue_per_employee / workdays_per_year *\n    (workdays_position_open + workdays_onboarding * onboarding_efficiency)\n\n  # Savings of Salary & Benefits (Cost Reduction)\n  salary_benefit_reduction <- salary / workdays_per_year * workdays_position_open\n\n  # Estimated Turnover Per Employee\n  cost_per_employee <- direct_cost + productivity_cost - salary_benefit_reduction\n\n  # Total Cost of Employee Turnover\n  total_cost <- n * cost_per_employee\n\n  return(total_cost)\n\n}\n\n\ncalculate_attrition_cost()\n\n#> [1] 78483.33\n\ncalculate_attrition_cost(150)\n\n#> [1] 11772500\n\ncalculate_attrition_cost(200)\n\n#> [1] 15696667\n\n\n\ncount_to_pct <- function(data, ..., col = n) {\n\n  # capture the dots\n  grouping_vars_expr <- quos(...)\n  col_expr <- enquo(col)\n\n  ret <- data %>%\n    group_by(!!! grouping_vars_expr) %>%\n    mutate(pct = (!! col_expr) / sum(!! col_expr)) %>%\n    ungroup()\n\n  return(ret)\n\n}\n\n\nassess_attrition <- function(data, attrition_col, attrition_value, baseline_pct) {\n\n  attrition_col_expr <- enquo(attrition_col)\n\n  data %>%\n  \n    # Use parenthesis () to give tidy eval evaluation priority\n    filter((!! attrition_col_expr) %in% attrition_value) %>%\n    arrange(desc(pct)) %>%\n    mutate(\n      # Function inputs in numeric format (e.g. baseline_pct = 0.088 don't require tidy eval)\n      above_industry_avg = case_when(\n        pct > baseline_pct ~ \"Yes\",\n        TRUE ~ \"No\"\n      )\n    )\n\n}\n\n\ndept_job_role_tbl %>%\n\n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) %>%\n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n\n# Data Manipulation\n  mutate(name = str_c(Department, JobRole, sep = \": \") %>% as_factor()) %>%\n\n  # Check levels\n  # pull(name) %>%\n  # levels()\n\n  mutate(name      = fct_reorder(name, cost_of_attrition)) %>%\n  mutate(cost_text = str_c(\"$\", format(cost_of_attrition / 1e6, digits = 2),\n                           \"M\", sep = \"\")) %>%\n\n  #Plotting\n  ggplot(aes(cost_of_attrition, y = name)) +\n  geom_segment(aes(xend = 0, yend = name),    color = \"#2dc6d6\") +\n  geom_point(  aes(size = cost_of_attrition), color = \"#2dc6d6\") +\n  scale_x_continuous(labels = scales::dollar) +\n  geom_label(aes(label = cost_text, size = cost_of_attrition),\n             hjust = \"inward\", color = \"#2dc6d6\") +\n  scale_size(range = c(3, 5)) +\n  labs(title = \"Estimated cost of Attrition: By Dept and Job Role\",\n       y = \"\",\n       x = \"Cost of attrition\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n# Function to plot attrition\nplot_attrition <- function(data, \n                           ..., \n                           .value,\n                           fct_reorder = TRUE,\n                           fct_rev     = FALSE,\n                           include_lbl = TRUE,\n                           color       = \"#2dc6d6\",\n                           units       = c(\"0\", \"K\", \"M\")) {\n\n  ### Inputs\n  group_vars_expr   <- quos(...)\n  \n  # If the user does not supply anything, \n  # this takes the first column of the supplied data\n  if (length(group_vars_expr) == 0) {\n    group_vars_expr <- quos(rlang::sym(colnames(data)[[1]]))\n    }\n\n  value_expr <- enquo(.value)\n\n  units_val  <- switch(units[[1]],\n                       \"M\" = 1e6,\n                       \"K\" = 1e3,\n                       \"0\" = 1)\n  if (units[[1]] == \"0\") units <- \"\"\n\n  # Data Manipulation\n  # This is a so called Function Factory (a function that produces a function)\n  usd <- scales::dollar_format(prefix = \"$\", largest_with_cents = 1e3)\n\n  # Create the axis labels and values for the plot\n  data_manipulated <- data %>%\n    mutate(name = str_c(!!! group_vars_expr, sep = \": \") %>% as_factor()) %>%\n    mutate(value_text = str_c(usd(!! value_expr / units_val),\n                              units[[1]], sep = \"\"))\n\n  \n  # Order the labels on the y-axis according to the input\n  if (fct_reorder) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_reorder(name, !! value_expr)) %>%\n      arrange(name)\n  }\n\n  if (fct_rev) {\n    data_manipulated <- data_manipulated %>%\n      mutate(name = forcats::fct_rev(name)) %>%\n      arrange(name)\n  }\n\n  # Visualization\n  g <- data_manipulated %>%\n\n        # \"name\" is a column name generated by our function internally as part of the data manipulation task\n        ggplot(aes(x = (!! value_expr), y = name)) +\n        geom_segment(aes(xend = 0, yend = name), color = color) +\n        geom_point(aes(size = !! value_expr), color = color) +\n        scale_x_continuous(labels = scales::dollar) +\n        scale_size(range = c(3, 5)) +\n        theme(legend.position = \"none\")\n\n  # Plot labels if TRUE\n  if (include_lbl) {\n    g <- g +\n      geom_label(aes(label = value_text, size = !! value_expr),\n                 hjust = \"inward\", color = color)\n  }\n\n  return(g)\n\n}\n\n\ndept_job_role_tbl %>%\n\n  # Select columnns\n  count(Department, JobRole, Attrition) %>%\n  count_to_pct(Department, JobRole) %>%\n  \n  assess_attrition(Attrition, attrition_value = \"Yes\", baseline_pct = 0.088) %>%\n  mutate(\n    cost_of_attrition = calculate_attrition_cost(n = n, salary = 80000)\n  ) %>%\n\n  # Select columnns\n  plot_attrition(Department, JobRole, .value = cost_of_attrition,\n                 units = \"M\") +\n  labs(\n    title = \"Estimated Cost of Attrition by Job Role\",\n    x = \"Cost of Attrition\",\n    subtitle = \"Looks like Sales Executive and Labaratory Technician are the biggest drivers of cost\"\n  )\n\n\n\n\n\n\n\n\nData Understanding\n\n# Libraries \nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\n# Load Data data definitions\n\npath_data_definitions <- \"../../files/data_definitions.xlsx\"\ndefinitions_raw_tbl   <- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\n#> New names:\n#> • `` -> `...1`\n#> • `` -> `...2`\n\nemployee_attrition_tbl\n\n\n\n  \n\n\n\n\n# Descriptive Features\nemployee_attrition_tbl %>% select(Age, DistanceFromHome, Gender, MaritalStatus, NumCompaniesWorked, Over18)\n\n\n\n  \n\n\n# Employment Features\nemployee_attrition_tbl %>% select(Department, EmployeeCount, EmployeeNumber, JobInvolvement, JobLevel, JobRole, JobSatisfaction)\n\n\n\n  \n\n\n# Compensation Features\nemployee_attrition_tbl %>% select(DailyRate, HourlyRate, MonthlyIncome, MonthlyRate, PercentSalaryHike, StockOptionLevel)\n\n\n\n  \n\n\n# Survery Results\nemployee_attrition_tbl %>% select(EnvironmentSatisfaction, JobSatisfaction, RelationshipSatisfaction, WorkLifeBalance)\n\n\n\n  \n\n\n# Performance Data\nemployee_attrition_tbl %>% select(JobInvolvement, PerformanceRating)\n\n\n\n  \n\n\n# Work-Life Features\nemployee_attrition_tbl %>% select(BusinessTravel, OverTime)\n\n\n\n  \n\n\n# Training & Education\nemployee_attrition_tbl %>% select(Education, EducationField, TrainingTimesLastYear)\n\n\n\n  \n\n\n# Time-Based Features\nemployee_attrition_tbl %>% select(TotalWorkingYears, YearsAtCompany, YearsInCurrentRole, YearsSinceLastPromotion, YearsWithCurrManager)\n\n\n\n  \n\n\n\nData Summarization\n\nlibrary(skimr)\nskim(employee_attrition_tbl)\n\n\nData summary\n\n\nName\nemployee_attrition_tbl\n\n\nNumber of rows\n1470\n\n\nNumber of columns\n35\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n9\n\n\nnumeric\n26\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAttrition\n0\n1\n2\n3\n0\n2\n0\n\n\nBusinessTravel\n0\n1\n10\n17\n0\n3\n0\n\n\nDepartment\n0\n1\n5\n22\n0\n3\n0\n\n\nEducationField\n0\n1\n5\n16\n0\n6\n0\n\n\nGender\n0\n1\n4\n6\n0\n2\n0\n\n\nJobRole\n0\n1\n7\n25\n0\n9\n0\n\n\nMaritalStatus\n0\n1\n6\n8\n0\n3\n0\n\n\nOver18\n0\n1\n1\n1\n0\n1\n0\n\n\nOverTime\n0\n1\n2\n3\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n36.92\n9.14\n18\n30.00\n36.0\n43.00\n60\n▂▇▇▃▂\n\n\nDailyRate\n0\n1\n802.49\n403.51\n102\n465.00\n802.0\n1157.00\n1499\n▇▇▇▇▇\n\n\nDistanceFromHome\n0\n1\n9.19\n8.11\n1\n2.00\n7.0\n14.00\n29\n▇▅▂▂▂\n\n\nEducation\n0\n1\n2.91\n1.02\n1\n2.00\n3.0\n4.00\n5\n▂▃▇▆▁\n\n\nEmployeeCount\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁\n\n\nEmployeeNumber\n0\n1\n1024.87\n602.02\n1\n491.25\n1020.5\n1555.75\n2068\n▇▇▇▇▇\n\n\nEnvironmentSatisfaction\n0\n1\n2.72\n1.09\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nHourlyRate\n0\n1\n65.89\n20.33\n30\n48.00\n66.0\n83.75\n100\n▇▇▇▇▇\n\n\nJobInvolvement\n0\n1\n2.73\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▁\n\n\nJobLevel\n0\n1\n2.06\n1.11\n1\n1.00\n2.0\n3.00\n5\n▇▇▃▂▁\n\n\nJobSatisfaction\n0\n1\n2.73\n1.10\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nMonthlyIncome\n0\n1\n6502.93\n4707.96\n1009\n2911.00\n4919.0\n8379.00\n19999\n▇▅▂▁▂\n\n\nMonthlyRate\n0\n1\n14313.10\n7117.79\n2094\n8047.00\n14235.5\n20461.50\n26999\n▇▇▇▇▇\n\n\nNumCompaniesWorked\n0\n1\n2.69\n2.50\n0\n1.00\n2.0\n4.00\n9\n▇▃▂▂▁\n\n\nPercentSalaryHike\n0\n1\n15.21\n3.66\n11\n12.00\n14.0\n18.00\n25\n▇▅▃▂▁\n\n\nPerformanceRating\n0\n1\n3.15\n0.36\n3\n3.00\n3.0\n3.00\n4\n▇▁▁▁▂\n\n\nRelationshipSatisfaction\n0\n1\n2.71\n1.08\n1\n2.00\n3.0\n4.00\n4\n▅▅▁▇▇\n\n\nStandardHours\n0\n1\n80.00\n0.00\n80\n80.00\n80.0\n80.00\n80\n▁▁▇▁▁\n\n\nStockOptionLevel\n0\n1\n0.79\n0.85\n0\n0.00\n1.0\n1.00\n3\n▇▇▁▂▁\n\n\nTotalWorkingYears\n0\n1\n11.28\n7.78\n0\n6.00\n10.0\n15.00\n40\n▇▇▂▁▁\n\n\nTrainingTimesLastYear\n0\n1\n2.80\n1.29\n0\n2.00\n3.0\n3.00\n6\n▂▇▇▂▃\n\n\nWorkLifeBalance\n0\n1\n2.76\n0.71\n1\n2.00\n3.0\n3.00\n4\n▁▃▁▇▂\n\n\nYearsAtCompany\n0\n1\n7.01\n6.13\n0\n3.00\n5.0\n9.00\n40\n▇▂▁▁▁\n\n\nYearsInCurrentRole\n0\n1\n4.23\n3.62\n0\n2.00\n3.0\n7.00\n18\n▇▃▂▁▁\n\n\nYearsSinceLastPromotion\n0\n1\n2.19\n3.22\n0\n0.00\n1.0\n3.00\n15\n▇▁▁▁▁\n\n\nYearsWithCurrManager\n0\n1\n4.12\n3.57\n0\n2.00\n3.0\n7.00\n17\n▇▂▅▁▁\n\n\n\n\n# Character Data Type\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    glimpse()\n\n#> Rows: 1,470\n#> Columns: 9\n#> $ Attrition      <chr> \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n#> $ BusinessTravel <chr> \"Travel_Rarely\", \"Travel_Frequently\", \"Travel_Rarely\", …\n#> $ Department     <chr> \"Sales\", \"Research & Development\", \"Research & Developm…\n#> $ EducationField <chr> \"Life Sciences\", \"Life Sciences\", \"Other\", \"Life Scienc…\n#> $ Gender         <chr> \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Male\", \"Fe…\n#> $ JobRole        <chr> \"Sales Executive\", \"Research Scientist\", \"Laboratory Te…\n#> $ MaritalStatus  <chr> \"Single\", \"Married\", \"Single\", \"Married\", \"Married\", \"S…\n#> $ Over18         <chr> \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", \"Y\", …\n#> $ OverTime       <chr> \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No…\n\n# Get \"levels\"\nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(unique)\n\n#> $Attrition\n#> [1] \"Yes\" \"No\" \n#> \n#> $BusinessTravel\n#> [1] \"Travel_Rarely\"     \"Travel_Frequently\" \"Non-Travel\"       \n#> \n#> $Department\n#> [1] \"Sales\"                  \"Research & Development\" \"Human Resources\"       \n#> \n#> $EducationField\n#> [1] \"Life Sciences\"    \"Other\"            \"Medical\"          \"Marketing\"       \n#> [5] \"Technical Degree\" \"Human Resources\" \n#> \n#> $Gender\n#> [1] \"Female\" \"Male\"  \n#> \n#> $JobRole\n#> [1] \"Sales Executive\"           \"Research Scientist\"       \n#> [3] \"Laboratory Technician\"     \"Manufacturing Director\"   \n#> [5] \"Healthcare Representative\" \"Manager\"                  \n#> [7] \"Sales Representative\"      \"Research Director\"        \n#> [9] \"Human Resources\"          \n#> \n#> $MaritalStatus\n#> [1] \"Single\"   \"Married\"  \"Divorced\"\n#> \n#> $Over18\n#> [1] \"Y\"\n#> \n#> $OverTime\n#> [1] \"Yes\" \"No\"\n\n# Proportions    \nemployee_attrition_tbl %>%\n    select_if(is.character) %>%\n    map(~ table(.) %>% prop.table())\n\n#> $Attrition\n#> .\n#>        No       Yes \n#> 0.8387755 0.1612245 \n#> \n#> $BusinessTravel\n#> .\n#>        Non-Travel Travel_Frequently     Travel_Rarely \n#>         0.1020408         0.1884354         0.7095238 \n#> \n#> $Department\n#> .\n#>        Human Resources Research & Development                  Sales \n#>             0.04285714             0.65374150             0.30340136 \n#> \n#> $EducationField\n#> .\n#>  Human Resources    Life Sciences        Marketing          Medical \n#>       0.01836735       0.41224490       0.10816327       0.31564626 \n#>            Other Technical Degree \n#>       0.05578231       0.08979592 \n#> \n#> $Gender\n#> .\n#> Female   Male \n#>    0.4    0.6 \n#> \n#> $JobRole\n#> .\n#> Healthcare Representative           Human Resources     Laboratory Technician \n#>                0.08911565                0.03537415                0.17619048 \n#>                   Manager    Manufacturing Director         Research Director \n#>                0.06938776                0.09863946                0.05442177 \n#>        Research Scientist           Sales Executive      Sales Representative \n#>                0.19863946                0.22176871                0.05646259 \n#> \n#> $MaritalStatus\n#> .\n#>  Divorced   Married    Single \n#> 0.2224490 0.4578231 0.3197279 \n#> \n#> $Over18\n#> .\n#> Y \n#> 1 \n#> \n#> $OverTime\n#> .\n#>        No       Yes \n#> 0.7170068 0.2829932\n\n# Numeric Data\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map(~ unique(.) %>% length())\n\n#> $Age\n#> [1] 43\n#> \n#> $DailyRate\n#> [1] 886\n#> \n#> $DistanceFromHome\n#> [1] 29\n#> \n#> $Education\n#> [1] 5\n#> \n#> $EmployeeCount\n#> [1] 1\n#> \n#> $EmployeeNumber\n#> [1] 1470\n#> \n#> $EnvironmentSatisfaction\n#> [1] 4\n#> \n#> $HourlyRate\n#> [1] 71\n#> \n#> $JobInvolvement\n#> [1] 4\n#> \n#> $JobLevel\n#> [1] 5\n#> \n#> $JobSatisfaction\n#> [1] 4\n#> \n#> $MonthlyIncome\n#> [1] 1349\n#> \n#> $MonthlyRate\n#> [1] 1427\n#> \n#> $NumCompaniesWorked\n#> [1] 10\n#> \n#> $PercentSalaryHike\n#> [1] 15\n#> \n#> $PerformanceRating\n#> [1] 2\n#> \n#> $RelationshipSatisfaction\n#> [1] 4\n#> \n#> $StandardHours\n#> [1] 1\n#> \n#> $StockOptionLevel\n#> [1] 4\n#> \n#> $TotalWorkingYears\n#> [1] 40\n#> \n#> $TrainingTimesLastYear\n#> [1] 7\n#> \n#> $WorkLifeBalance\n#> [1] 4\n#> \n#> $YearsAtCompany\n#> [1] 37\n#> \n#> $YearsInCurrentRole\n#> [1] 19\n#> \n#> $YearsSinceLastPromotion\n#> [1] 16\n#> \n#> $YearsWithCurrManager\n#> [1] 18\n\nemployee_attrition_tbl %>%\n    select_if(is.numeric) %>%\n    map_df(~ unique(.) %>% length()) %>%\n    # Select all columns\n    pivot_longer(everything()) %>%\n    arrange(value) %>%\n    filter(value <= 10)\n\n\n\n  \n\n\n\nData Visualization\n\nlibrary(GGally)\n\nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    ggpairs() \n\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\n\nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    ggpairs(aes(color = Attrition), lower = \"blank\", legend = 1,\n            diag  = list(continuous = wrap(\"densityDiag\", alpha = 0.5))) +\n    theme(legend.position = \"bottom\")\n\n\n\n\n\n\n\n\nCustom plotting function:\n\ndata <- employee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome)\n\nplot_ggpairs <- function(data, color = NULL, density_alpha = 0.5) {\n    \n    color_expr <- enquo(color)\n    \n    if (rlang::quo_is_null(color_expr)) {\n        \n        g <- data %>%\n            ggpairs(lower = \"blank\") \n        \n    } else {\n        \n        color_name <- quo_name(color_expr)\n        \n        g <- data %>%\n            ggpairs(mapping = aes_string(color = color_name), \n                    lower = \"blank\", legend = 1,\n                    diag = list(continuous = wrap(\"densityDiag\", \n                                                  alpha = density_alpha))) +\n            theme(legend.position = \"bottom\")\n    }\n    \n    return(g)\n    \n}\n\nemployee_attrition_tbl %>%\n    select(Attrition, Age, Gender, MaritalStatus, NumCompaniesWorked, Over18, DistanceFromHome) %>%\n    plot_ggpairs(color = Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\n1 Challenge Answers:\n\nCompensation features: MonthlyIncome and Attrition\n\n\nAnswer: C- Those that are leaving have a lower Monthly Income\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\nCompensation Features: Percent Salary Hike and Attrition\n\n\nAnswer: D- It’s difficult to deduce anything based on the visualization\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n#> Warning: `aes_string()` was deprecated in ggplot2 3.0.0.\n#> ℹ Please use tidy evaluation idioms with `aes()`.\n#> ℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\n\n\n\n\n\n\n\n\n\nCompensation Features: Stock Option Level and Attrition\n\n\nAnswer: B - Those that are staying have a higher stock option level\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"income\"), contains(\"rate\"), contains(\"salary\"), contains(\"stock\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nSurvey Results: Environment Satisfaction , Attrition\n\n\nAnswer: A- A higher proportion of those leaving have a low environment satisfaction level\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nSurvey Results: Work Life Balance and Attrition\n\n\nAnswer: B- Those that are staying have a higher density of 2’s and 3’s\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"satisfaction\"), contains(\"life\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nPerformance Data: Job Involvement and Attrition\n\n\nAnswer: A- Those that are leaving have a lower density of 3’s and 4’s\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"performance\"), contains(\"involvement\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nWork-Life Features: Over Time and Attrition\n\nAnswer: A- The proportion of those leaving that are working Over Time are high compared to those that are not leaving\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"overtime\"), contains(\"travel\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nTraining and Education: Training Times Last Year and Attrition\n\n\nAnswer: B- People that leave tend to have less annual trainings\n\nemployee_attrition_tbl %>%\n    select(Attrition, contains(\"training\"), contains(\"education\")) %>%\n    plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nTime-Based Features: Years At Company and Attrition\n\n\nAnswer: B- People that leave tend to have less working years at the company\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"years\")) %>%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\n\n\nTime-Based Features: Years Since Last Promotion and Attrition\n\n\nAnswer: C- It’s difficult to deduce anything based on the visualization\n\nemployee_attrition_tbl %>%\n  select(Attrition, contains(\"years\")) %>%\n  plot_ggpairs(Attrition)"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Milan’s Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Milan’s Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  },
  {
    "objectID": "files/Chapter_1_Challenge.html",
    "href": "files/Chapter_1_Challenge.html",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "files/Chapter_1_Challenge.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %>% glimpse()\n\nRows: 1,225,765\nColumns: 8\n$ symbol   <chr> \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n$ date     <date> 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n$ open     <dbl> 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n$ high     <dbl> 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n$ low      <dbl> 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n$ close    <dbl> 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n$ volume   <dbl> 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n$ adjusted <dbl> 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n# Apply your data transformation skills!\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "href": "files/Chapter_1_Challenge.html#step-2---convert-to-user-item-format",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 2 - Convert to User-Item Format",
    "text": "Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl <- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n# A tibble: 141,340 × 3\n   symbol date       pct_return\n   <chr>  <date>          <dbl>\n 1 MSFT   2018-01-03   0.00465 \n 2 MSFT   2018-01-04   0.00880 \n 3 MSFT   2018-01-05   0.0124  \n 4 MSFT   2018-01-08   0.00102 \n 5 MSFT   2018-01-09  -0.000680\n 6 MSFT   2018-01-10  -0.00453 \n 7 MSFT   2018-01-11   0.00296 \n 8 MSFT   2018-01-12   0.0173  \n 9 MSFT   2018-01-16  -0.0140  \n10 MSFT   2018-01-17   0.0203  \n# ℹ 141,330 more rows\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n# Convert to User-Item Format\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "href": "files/Chapter_1_Challenge.html#step-3---perform-k-means-clustering",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 3 - Perform K-Means Clustering",
    "text": "Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl <- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\nPerform kmeans() with centers = 4 and nstart = 20\nSave the result as kmeans_obj\n\n\n# Create kmeans_obj for 4 centers\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss"
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "href": "files/Chapter_1_Challenge.html#step-4---find-the-optimal-value-of-k",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 4 - Find the optimal value of K",
    "text": "Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper <- function(center = 3) {\n    stock_date_matrix_tbl %>%\n        select(-symbol) %>%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n# Use purrr to map\n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-5---apply-umap",
    "href": "files/Chapter_1_Challenge.html#step-5---apply-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 5 - Apply UMAP",
    "text": "Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n# Apply UMAP\n\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\nConvert from a matrix data type to a tibble with as_tibble()\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\n\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "files/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "href": "files/Chapter_1_Challenge.html#step-6---combine-k-means-and-umap",
    "title": "Session 6 - Challenge - Company Segmentation",
    "section": "Step 6 - Combine K-Means and UMAP",
    "text": "Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl <- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   <- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\n\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %>% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\nUse ggplot() mapping V1, V2 and color = .cluster\nAdd the geom_point() geometry with alpha = 0.5\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %>% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\nCongratulations! You are done with the 1st challenge!"
  }
]